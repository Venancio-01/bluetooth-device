{"version":3,"sources":["../test.ts"],"sourcesContent":["#!/usr/bin/env ts-node\nimport process from 'process'\nimport axios from 'axios'\nimport { EventSource } from 'eventsource'\nimport yargs from 'yargs'\nimport { hideBin } from 'yargs/helpers'\n\nconst BASE_URL = 'http://localhost:3000'\n\n// ÂëΩ‰ª§Á†Å (‰∏é src/communication.ts ‰∏ÄËá¥)\nconst CommandCode = {\n  START: 1,\n  HEARTBEAT: 2,\n  STOP: 3,\n}\n\nasync function sendCommand(command: number, data = {}) {\n  try {\n    const response = await axios.post(`${BASE_URL}/command`, {\n      c: command,\n      d: data,\n    })\n    console.log('‚úÖ  Response:')\n    console.log(response.data)\n  }\n  catch (error: any) {\n    console.error('‚ùå  Error:')\n    if (error.response) {\n      console.error(error.response.data)\n    }\n    else {\n      console.error(error.message)\n    }\n  }\n}\n\nyargs(hideBin(process.argv))\n  .scriptName('test-client')\n  .command(\n    'heartbeat',\n    'Send heartbeat command',\n    () => {},\n    async () => {\n      console.log('Sending [heartbeat] command...')\n      await sendCommand(CommandCode.HEARTBEAT)\n    },\n  )\n  .command(\n    'start',\n    'Send start scan command',\n    () => {},\n    async () => {\n      console.log('Sending [start] command...')\n      await sendCommand(CommandCode.START)\n    },\n  )\n  .command(\n    'stop',\n    'Send stop scan command',\n    () => {},\n    async () => {\n      console.log('Sending [stop] command...')\n      await sendCommand(CommandCode.STOP)\n    },\n  )\n  .command(\n    'listen',\n    'Listen for device events from the server',\n    () => {},\n    () => {\n      console.log('Listening for events from server...')\n      const es = new EventSource(`${BASE_URL}/events`)\n      es.onmessage = (event: MessageEvent) => {\n        console.log('üì©  Received event:')\n        console.log(JSON.parse(event.data))\n      }\n      es.onerror = (err: Event & { status?: number, message?: string }) => {\n        if (err.status === 404) {\n          console.error('‚ùå Server not found. Is the main application running?')\n        }\n        else {\n          console.error('‚ùå EventSource error:', err.message || err)\n        }\n        es.close()\n      }\n    },\n  )\n  .demandCommand(1, 'You need at least one command before moving on')\n  .help()\n  .parse()\n"],"mappings":";;;AACA,OAAO,aAAa;AACpB,OAAO,WAAW;AAClB,SAAS,mBAAmB;AAC5B,OAAO,WAAW;AAClB,SAAS,eAAe;AAExB,IAAM,WAAW;AAGjB,IAAM,cAAc;AAAA,EAClB,OAAO;AAAA,EACP,WAAW;AAAA,EACX,MAAM;AACR;AAEA,eAAe,YAAY,SAAiB,OAAO,CAAC,GAAG;AACrD,MAAI;AACF,UAAM,WAAW,MAAM,MAAM,KAAK,GAAG,QAAQ,YAAY;AAAA,MACvD,GAAG;AAAA,MACH,GAAG;AAAA,IACL,CAAC;AACD,YAAQ,IAAI,mBAAc;AAC1B,YAAQ,IAAI,SAAS,IAAI;AAAA,EAC3B,SACO,OAAY;AACjB,YAAQ,MAAM,gBAAW;AACzB,QAAI,MAAM,UAAU;AAClB,cAAQ,MAAM,MAAM,SAAS,IAAI;AAAA,IACnC,OACK;AACH,cAAQ,MAAM,MAAM,OAAO;AAAA,IAC7B;AAAA,EACF;AACF;AAEA,MAAM,QAAQ,QAAQ,IAAI,CAAC,EACxB,WAAW,aAAa,EACxB;AAAA,EACC;AAAA,EACA;AAAA,EACA,MAAM;AAAA,EAAC;AAAA,EACP,YAAY;AACV,YAAQ,IAAI,gCAAgC;AAC5C,UAAM,YAAY,YAAY,SAAS;AAAA,EACzC;AACF,EACC;AAAA,EACC;AAAA,EACA;AAAA,EACA,MAAM;AAAA,EAAC;AAAA,EACP,YAAY;AACV,YAAQ,IAAI,4BAA4B;AACxC,UAAM,YAAY,YAAY,KAAK;AAAA,EACrC;AACF,EACC;AAAA,EACC;AAAA,EACA;AAAA,EACA,MAAM;AAAA,EAAC;AAAA,EACP,YAAY;AACV,YAAQ,IAAI,2BAA2B;AACvC,UAAM,YAAY,YAAY,IAAI;AAAA,EACpC;AACF,EACC;AAAA,EACC;AAAA,EACA;AAAA,EACA,MAAM;AAAA,EAAC;AAAA,EACP,MAAM;AACJ,YAAQ,IAAI,qCAAqC;AACjD,UAAM,KAAK,IAAI,YAAY,GAAG,QAAQ,SAAS;AAC/C,OAAG,YAAY,CAAC,UAAwB;AACtC,cAAQ,IAAI,4BAAqB;AACjC,cAAQ,IAAI,KAAK,MAAM,MAAM,IAAI,CAAC;AAAA,IACpC;AACA,OAAG,UAAU,CAAC,QAAuD;AACnE,UAAI,IAAI,WAAW,KAAK;AACtB,gBAAQ,MAAM,2DAAsD;AAAA,MACtE,OACK;AACH,gBAAQ,MAAM,6BAAwB,IAAI,WAAW,GAAG;AAAA,MAC1D;AACA,SAAG,MAAM;AAAA,IACX;AAAA,EACF;AACF,EACC,cAAc,GAAG,gDAAgD,EACjE,KAAK,EACL,MAAM;","names":[]}