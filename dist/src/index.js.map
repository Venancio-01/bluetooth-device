{"version":3,"sources":["../../src/index.ts","../../src/blue-device.ts","../../src/protocol.ts","../../src/utils.ts","../../src/communication.ts","../../src/http-transport.ts"],"sourcesContent":["import type { ITransport, ResponseCallback } from './transport'\nimport process from 'process'\nimport { BlueDevice } from './blue-device'\nimport {\n  CommandCode,\n  createDeviceEvent,\n  createErrorResponse,\n  createStatusResponse,\n  parseJSONMessage,\n} from './communication'\nimport { HttpTransport } from './http-transport'\n\nlet blueDevice: BlueDevice | null = null\nlet transport: ITransport | null = null\n\n/**\n * 处理来自传输层的消息\n * @param message JSON 字符串消息\n * @param cb      响应回调\n */\nfunction handleMessage(message: string, cb: ResponseCallback) {\n  const request = parseJSONMessage(message)\n  if (!request) {\n    const errorResponse = createErrorResponse({ msg: 'Invalid message format' })\n    return cb(errorResponse)\n  }\n\n  switch (request.c) {\n    case CommandCode.HEARTBEAT:\n      console.log('收到心跳指令')\n      return cb(onReviceHeartbeat())\n\n    case CommandCode.START:\n      console.log('收到启动扫描指令')\n      return cb(onReviceStart(request.d?.['rssi'] as number | undefined || 60))\n\n    case CommandCode.STOP:\n      console.log('收到停止扫描指令')\n      return cb(onReviceStop())\n\n    default:\n      return cb(createErrorResponse({ msg: 'Unknown command' }))\n  }\n}\n\nasync function main() {\n  blueDevice = new BlueDevice()\n  transport = new HttpTransport() // 可替换为 new SerialTransport()\n\n  // 监听来自传输层的指令\n  transport.on('data', (message, cb) => {\n    handleMessage(message, cb)\n  })\n\n  // 监听蓝牙设备事件，并通过传输层上报\n  blueDevice.on('device', (device) => {\n    console.log('设备上报:', device)\n    const event = createDeviceEvent(device as Record<string, unknown>)\n    transport?.send(event)\n  })\n\n  try {\n    await blueDevice.connect()\n    console.log('蓝牙模块连接成功')\n    await transport.start()\n  }\n  catch (error) {\n    console.error(error)\n    // 连接失败，直接退出\n    process.exit(1)\n  }\n\n  try {\n    await blueDevice.initialize()\n    console.log('蓝牙模块初始化完成')\n  }\n  catch (error) {\n    console.error(error)\n  }\n}\n\n/**\n * 处理心跳指令\n * @param message 心跳指令\n * @returns 心跳响应\n */\nfunction onReviceHeartbeat() {\n  console.log('收到心跳指令')\n  return createStatusResponse({ run: true })\n}\n\n/**\n * 处理启动扫描指令\n * @param message 启动扫描指令\n * @returns 启动扫描响应\n */\nfunction onReviceStart(rssi: number) {\n  console.log('收到启动扫描指令')\n  blueDevice?.startScan(rssi)\n  return createStatusResponse({ msg: 'Scan started' })\n}\n\n/**\n * 处理停止扫描指令\n * @returns 停止扫描响应\n */\nfunction onReviceStop() {\n  console.log('收到停止扫描指令')\n  blueDevice?.stopScan()\n  return createStatusResponse({ msg: 'Scan stopped' })\n}\n\nprocess.on('SIGINT', () => {\n  console.log('\\n正在关闭程序...')\n  blueDevice?.disconnect()\n  transport?.stop()\n  process.exit()\n})\n\nmain()\n","import { EventEmitter } from 'events'\nimport { ReadlineParser } from '@serialport/parser-readline'\nimport { SerialPort } from 'serialport'\nimport { buildEnterCommandMode, buildObserverCommand, buildRestartCommand, buildRoleCommand } from './protocol'\nimport { sleep } from './utils'\n\n// 厂商字典\nconst MANUFACTURER_DICT = {\n  '0001': 'Nokia Mobile Phones',\n  // '0006': 'Microsoft',\n  '0008': 'Motorola',\n  '004C': 'Apple, Inc.',\n  '0056': 'Sony Ericsson Mobile Communications',\n  '0075': 'Samsung Electronics Co. Ltd.',\n  '00C4': 'LG Electronics',\n  '00EO': 'Google',\n} as const\n\nexport class BlueDevice extends EventEmitter {\n  private port: SerialPort | null = null\n  private initializeState: 'uninitialized' | 'initializing' | 'initialized' = 'uninitialized'\n  private isScanning = false\n\n  constructor() {\n    super()\n    this.port = null\n  }\n\n  async connect() {\n    return new Promise((resolve, reject) => {\n      this.port = new SerialPort({\n        path: '/dev/ttyUSB0',\n        baudRate: 115200,\n        dataBits: 8,\n        stopBits: 1,\n        parity: 'none',\n        autoOpen: false,\n      }, (err) => {\n        if (err) {\n          reject(err)\n        }\n      })\n\n      const parser = this.port.pipe(new ReadlineParser({ delimiter: '\\r\\n' }))\n\n      this.port.on('open', () => {\n        resolve(this.port)\n      })\n\n      this.port.on('error', (err) => {\n        reject(err)\n      })\n\n      this.port.on('close', () => {\n        reject(new Error('串口关闭'))\n      })\n\n      parser.on('data', (data) => {\n        console.log('接收数据:', data)\n        this.parseData(data)\n      })\n\n      this.port.open()\n    })\n  }\n\n  async disconnect() {\n    this.port?.close()\n  }\n\n  async send(data: string) {\n    console.log('发送数据:', data)\n    this.port?.write(data, (err) => {\n      if (err) {\n        console.error('发送数据时出错:', err.message)\n      }\n    })\n  }\n\n  async parseData(data: string) {\n    const advStr = data.split(',')?.[2]?.split(':')?.[1]\n\n    if (!advStr) {\n      return\n    }\n\n    const splitStrIndex = advStr.indexOf('FF')\n    const splitStr = advStr.substring(splitStrIndex, splitStrIndex + 2)\n\n    if (splitStr === 'FF') {\n      const targetStr = advStr.substring(splitStrIndex + 4, splitStrIndex + 6) + advStr.substring(splitStrIndex + 2, splitStrIndex + 4)\n      const manufacturer = MANUFACTURER_DICT[targetStr as keyof typeof MANUFACTURER_DICT]\n      if (manufacturer) {\n        console.log('manufacturer', manufacturer)\n        this.emit('device', { mf: manufacturer })\n      }\n    }\n  }\n\n  async sendAndSleep(data: string, sleepTime: number) {\n    await this.send(data)\n    await sleep(sleepTime)\n    this.initializeState = 'initialized'\n  }\n\n  async initialize() {\n    if (this.initializeState === 'initializing' || this.initializeState === 'initialized') {\n      return\n    }\n\n    this.initializeState = 'initializing'\n\n    // 重启设备\n    await this.sendAndSleep(buildRestartCommand(), 1000)\n\n    // 进入AT命令模式\n    await this.sendAndSleep(buildEnterCommandMode(), 1000)\n\n    // 设置设备为从机模式\n    await this.sendAndSleep(buildRoleCommand(), 1000)\n\n    // 重启设备\n    await this.sendAndSleep(buildRestartCommand(), 3000)\n\n    // 进入AT命令模式\n    await this.sendAndSleep(buildEnterCommandMode(), 2000)\n\n    this.initializeState = 'initialized'\n  }\n\n  async startScan(rssi = 60) {\n    if (this.initializeState === 'uninitialized') {\n      await this.initialize()\n    }\n\n    if (this.initializeState === 'initializing') {\n      console.log('设备初始化中，请稍后再试')\n      return\n    }\n    this.isScanning = true\n    // 设置设备为观察者模式\n    await this.sendAndSleep(buildObserverCommand(rssi), 0)\n  }\n\n  async stopScan() {\n    if (!this.isScanning) {\n      return\n    }\n    // 通过重启设备来停止扫描\n    await this.sendAndSleep(buildRestartCommand(), 1000)\n    this.isScanning = false\n  }\n}\n","const AT_COMMAND_SUFFIX = '\\r\\n' // 所有 AT 命令都必须以回车换行符结尾\nconst AT_COMMAND_PREFIX = 'AT' // 所有 AT 命令都必须以 AT 开头\nconst AT_COMMAND_MODE = '+++' // 进入AT命令模式,无需回车换行符\n\nconst AT_RESTART = 'RESTART'\nconst AT_ROLE = 'ROLE=1'\nconst AT_START_OBSERVER = 'OBSERVER=1,4,,,'\nconst AT_STOP_OBSERVER = 'OBSERVER=0'\n\n/**\n * 进入AT命令模式\n */\nexport function buildEnterCommandMode() {\n  return `${AT_COMMAND_MODE}`\n}\n\n/**\n * 重启设备\n */\nexport function buildRestartCommand() {\n  return `${AT_COMMAND_PREFIX}+${AT_RESTART}${AT_COMMAND_SUFFIX}`\n}\n\n/**\n * 设置设备为从机模式\n */\nexport function buildRoleCommand() {\n  return `${AT_COMMAND_PREFIX}+${AT_ROLE}${AT_COMMAND_SUFFIX}`\n}\n\n/**\n * 设置设备为观察者模式\n */\nexport function buildObserverCommand(rssi = 60) {\n  const defaultRssi = `-${rssi}`\n  return `${AT_COMMAND_PREFIX}+${AT_START_OBSERVER}${defaultRssi}${AT_COMMAND_SUFFIX}`\n}\n\n/**\n * 停止观察者模式\n */\nexport function buildStopObserverCommand() {\n  return `${AT_COMMAND_PREFIX}+${AT_STOP_OBSERVER}${AT_COMMAND_SUFFIX}`\n}\n","export function sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n","import { z } from 'zod'\n\n// 1. 编码字典\n\n// 命令码 (上位机 -> 程序)\nexport const CommandCode = {\n  START: 1,\n  HEARTBEAT: 2,\n  STOP: 3,\n} as const\n\n// 事件/响应码 (程序 -> 上位机)\nexport const EventTypeCode = {\n  STATUS: 1,\n  ERROR: 2,\n  DEVICE: 3,\n} as const\n\n// 2. 通信格式定义\n\n// 请求格式 (上位机 -> 程序)\nconst RequestSchema = z.object({\n  c: z.nativeEnum(CommandCode),\n  d: z.record(z.unknown()).optional(),\n})\n\n// 响应/上报格式 (程序 -> 上位机)\nexport const ResponseSchema = z.object({\n  t: z.nativeEnum(EventTypeCode),\n  d: z.record(z.unknown()),\n})\n\nexport type RequestPayload = z.infer<typeof RequestSchema>\nexport type ResponsePayload = z.infer<typeof ResponseSchema>\n\n// 3. 消息创建辅助函数\n\n/**\n * 创建一个标准的状态响应\n * @param data 负载数据\n */\nexport function createStatusResponse(data: Record<string, unknown>): string {\n  const payload: ResponsePayload = {\n    t: EventTypeCode.STATUS,\n    d: data,\n  }\n  return JSON.stringify(payload)\n}\n\n/**\n * 创建一个标准的错误响应\n * @param data 负载数据\n */\nexport function createErrorResponse(data: Record<string, unknown>): string {\n  const payload: ResponsePayload = {\n    t: EventTypeCode.ERROR,\n    d: data,\n  }\n  return JSON.stringify(payload)\n}\n\n/**\n * 创建一个设备上报消息\n * @param data 负载数据\n */\nexport function createDeviceEvent(data: Record<string, unknown>): string {\n  const payload: ResponsePayload = {\n    t: EventTypeCode.DEVICE,\n    d: data,\n  }\n  return JSON.stringify(payload)\n}\n\n/**\n * 解析传入的 JSON 消息\n * @param message 字符串消息\n * @returns 解析后的数据或在无效时返回 null\n */\nexport function parseJSONMessage(message: string): RequestPayload | null {\n  try {\n    const json = JSON.parse(message)\n    const validation = RequestSchema.safeParse(json)\n    if (validation.success) {\n      return validation.data\n    }\n    console.error('Invalid message format:', validation.error)\n    return null\n  }\n  catch (error) {\n    console.error('Failed to parse JSON message:', error)\n    return null\n  }\n}\n","import type { Server } from 'http'\nimport type { ITransport, ResponseCallback } from './transport'\nimport { EventEmitter } from 'events'\nimport express from 'express'\n\nexport class HttpTransport extends EventEmitter implements ITransport {\n  private server: Server | null = null\n  private sseClients: express.Response[] = []\n  private readonly port: number\n  private readonly app: express.Express\n\n  constructor(port = 8888) {\n    super()\n    this.port = port\n    this.app = express()\n    this.setupRoutes()\n  }\n\n  start = async () => {\n    return new Promise<void>((resolve) => {\n      this.server = this.app.listen(this.port, () => {\n        console.log(`HTTP server listening on http://localhost:${this.port}`)\n        resolve()\n      })\n    })\n  }\n\n  stop = async () => {\n    return new Promise<void>((resolve) => {\n      this.sseClients.forEach(res => res.end())\n      this.sseClients = []\n      if (this.server) {\n        this.server.close(() => {\n          console.log('HTTP server stopped')\n          resolve()\n        })\n      }\n      else {\n        resolve()\n      }\n    })\n  }\n\n  send = (data: string) => {\n    console.log(`Sending event to ${this.sseClients.length} clients`)\n    this.sseClients.forEach((res) => {\n      res.write(`data: ${data}\\n\\n`)\n    })\n  }\n\n  private setupRoutes = () => {\n    this.app.post('/command', express.json(), (req: express.Request, res: express.Response) => {\n      const cb: ResponseCallback = (response) => {\n        res.status(200).send(response)\n      }\n      this.emit('data', req.body, cb)\n    })\n\n    this.app.get('/events', this.setupSse)\n  }\n\n  private setupSse = (req: express.Request, res: express.Response) => {\n    res.writeHead(200, {\n      'Content-Type': 'text/event-stream',\n      'Cache-Control': 'no-cache',\n      'Connection': 'keep-alive',\n    })\n    res.write('\\n') // Start the SSE stream\n\n    this.sseClients.push(res)\n    console.log('SSE client connected')\n\n    res.on('close', () => {\n      this.sseClients = this.sseClients.filter(client => client !== res)\n      console.log('SSE client disconnected')\n    })\n  }\n}\n"],"mappings":";AACA,OAAO,aAAa;;;ACDpB,SAAS,oBAAoB;AAC7B,SAAS,sBAAsB;AAC/B,SAAS,kBAAkB;;;ACF3B,IAAM,oBAAoB;AAC1B,IAAM,oBAAoB;AAC1B,IAAM,kBAAkB;AAExB,IAAM,aAAa;AACnB,IAAM,UAAU;AAChB,IAAM,oBAAoB;AAMnB,SAAS,wBAAwB;AACtC,SAAO,GAAG,eAAe;AAC3B;AAKO,SAAS,sBAAsB;AACpC,SAAO,GAAG,iBAAiB,IAAI,UAAU,GAAG,iBAAiB;AAC/D;AAKO,SAAS,mBAAmB;AACjC,SAAO,GAAG,iBAAiB,IAAI,OAAO,GAAG,iBAAiB;AAC5D;AAKO,SAAS,qBAAqB,OAAO,IAAI;AAC9C,QAAM,cAAc,IAAI,IAAI;AAC5B,SAAO,GAAG,iBAAiB,IAAI,iBAAiB,GAAG,WAAW,GAAG,iBAAiB;AACpF;;;ACpCO,SAAS,MAAM,IAAY;AAChC,SAAO,IAAI,QAAQ,aAAW,WAAW,SAAS,EAAE,CAAC;AACvD;;;AFKA,IAAM,oBAAoB;AAAA,EACxB,QAAQ;AAAA;AAAA,EAER,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,QAAQ;AACV;AAEO,IAAM,aAAN,cAAyB,aAAa;AAAA,EACnC,OAA0B;AAAA,EAC1B,kBAAoE;AAAA,EACpE,aAAa;AAAA,EAErB,cAAc;AACZ,UAAM;AACN,SAAK,OAAO;AAAA,EACd;AAAA,EAEA,MAAM,UAAU;AACd,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,WAAK,OAAO,IAAI,WAAW;AAAA,QACzB,MAAM;AAAA,QACN,UAAU;AAAA,QACV,UAAU;AAAA,QACV,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,UAAU;AAAA,MACZ,GAAG,CAAC,QAAQ;AACV,YAAI,KAAK;AACP,iBAAO,GAAG;AAAA,QACZ;AAAA,MACF,CAAC;AAED,YAAM,SAAS,KAAK,KAAK,KAAK,IAAI,eAAe,EAAE,WAAW,OAAO,CAAC,CAAC;AAEvE,WAAK,KAAK,GAAG,QAAQ,MAAM;AACzB,gBAAQ,KAAK,IAAI;AAAA,MACnB,CAAC;AAED,WAAK,KAAK,GAAG,SAAS,CAAC,QAAQ;AAC7B,eAAO,GAAG;AAAA,MACZ,CAAC;AAED,WAAK,KAAK,GAAG,SAAS,MAAM;AAC1B,eAAO,IAAI,MAAM,0BAAM,CAAC;AAAA,MAC1B,CAAC;AAED,aAAO,GAAG,QAAQ,CAAC,SAAS;AAC1B,gBAAQ,IAAI,6BAAS,IAAI;AACzB,aAAK,UAAU,IAAI;AAAA,MACrB,CAAC;AAED,WAAK,KAAK,KAAK;AAAA,IACjB,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,aAAa;AACjB,SAAK,MAAM,MAAM;AAAA,EACnB;AAAA,EAEA,MAAM,KAAK,MAAc;AACvB,YAAQ,IAAI,6BAAS,IAAI;AACzB,SAAK,MAAM,MAAM,MAAM,CAAC,QAAQ;AAC9B,UAAI,KAAK;AACP,gBAAQ,MAAM,+CAAY,IAAI,OAAO;AAAA,MACvC;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,UAAU,MAAc;AAC5B,UAAM,SAAS,KAAK,MAAM,GAAG,IAAI,CAAC,GAAG,MAAM,GAAG,IAAI,CAAC;AAEnD,QAAI,CAAC,QAAQ;AACX;AAAA,IACF;AAEA,UAAM,gBAAgB,OAAO,QAAQ,IAAI;AACzC,UAAM,WAAW,OAAO,UAAU,eAAe,gBAAgB,CAAC;AAElE,QAAI,aAAa,MAAM;AACrB,YAAM,YAAY,OAAO,UAAU,gBAAgB,GAAG,gBAAgB,CAAC,IAAI,OAAO,UAAU,gBAAgB,GAAG,gBAAgB,CAAC;AAChI,YAAM,eAAe,kBAAkB,SAA2C;AAClF,UAAI,cAAc;AAChB,gBAAQ,IAAI,gBAAgB,YAAY;AACxC,aAAK,KAAK,UAAU,EAAE,IAAI,aAAa,CAAC;AAAA,MAC1C;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,aAAa,MAAc,WAAmB;AAClD,UAAM,KAAK,KAAK,IAAI;AACpB,UAAM,MAAM,SAAS;AACrB,SAAK,kBAAkB;AAAA,EACzB;AAAA,EAEA,MAAM,aAAa;AACjB,QAAI,KAAK,oBAAoB,kBAAkB,KAAK,oBAAoB,eAAe;AACrF;AAAA,IACF;AAEA,SAAK,kBAAkB;AAGvB,UAAM,KAAK,aAAa,oBAAoB,GAAG,GAAI;AAGnD,UAAM,KAAK,aAAa,sBAAsB,GAAG,GAAI;AAGrD,UAAM,KAAK,aAAa,iBAAiB,GAAG,GAAI;AAGhD,UAAM,KAAK,aAAa,oBAAoB,GAAG,GAAI;AAGnD,UAAM,KAAK,aAAa,sBAAsB,GAAG,GAAI;AAErD,SAAK,kBAAkB;AAAA,EACzB;AAAA,EAEA,MAAM,UAAU,OAAO,IAAI;AACzB,QAAI,KAAK,oBAAoB,iBAAiB;AAC5C,YAAM,KAAK,WAAW;AAAA,IACxB;AAEA,QAAI,KAAK,oBAAoB,gBAAgB;AAC3C,cAAQ,IAAI,0EAAc;AAC1B;AAAA,IACF;AACA,SAAK,aAAa;AAElB,UAAM,KAAK,aAAa,qBAAqB,IAAI,GAAG,CAAC;AAAA,EACvD;AAAA,EAEA,MAAM,WAAW;AACf,QAAI,CAAC,KAAK,YAAY;AACpB;AAAA,IACF;AAEA,UAAM,KAAK,aAAa,oBAAoB,GAAG,GAAI;AACnD,SAAK,aAAa;AAAA,EACpB;AACF;;;AGxJA,SAAS,SAAS;AAKX,IAAM,cAAc;AAAA,EACzB,OAAO;AAAA,EACP,WAAW;AAAA,EACX,MAAM;AACR;AAGO,IAAM,gBAAgB;AAAA,EAC3B,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,QAAQ;AACV;AAKA,IAAM,gBAAgB,EAAE,OAAO;AAAA,EAC7B,GAAG,EAAE,WAAW,WAAW;AAAA,EAC3B,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC,EAAE,SAAS;AACpC,CAAC;AAGM,IAAM,iBAAiB,EAAE,OAAO;AAAA,EACrC,GAAG,EAAE,WAAW,aAAa;AAAA,EAC7B,GAAG,EAAE,OAAO,EAAE,QAAQ,CAAC;AACzB,CAAC;AAWM,SAAS,qBAAqB,MAAuC;AAC1E,QAAM,UAA2B;AAAA,IAC/B,GAAG,cAAc;AAAA,IACjB,GAAG;AAAA,EACL;AACA,SAAO,KAAK,UAAU,OAAO;AAC/B;AAMO,SAAS,oBAAoB,MAAuC;AACzE,QAAM,UAA2B;AAAA,IAC/B,GAAG,cAAc;AAAA,IACjB,GAAG;AAAA,EACL;AACA,SAAO,KAAK,UAAU,OAAO;AAC/B;AAMO,SAAS,kBAAkB,MAAuC;AACvE,QAAM,UAA2B;AAAA,IAC/B,GAAG,cAAc;AAAA,IACjB,GAAG;AAAA,EACL;AACA,SAAO,KAAK,UAAU,OAAO;AAC/B;AAOO,SAAS,iBAAiB,SAAwC;AACvE,MAAI;AACF,UAAM,OAAO,KAAK,MAAM,OAAO;AAC/B,UAAM,aAAa,cAAc,UAAU,IAAI;AAC/C,QAAI,WAAW,SAAS;AACtB,aAAO,WAAW;AAAA,IACpB;AACA,YAAQ,MAAM,2BAA2B,WAAW,KAAK;AACzD,WAAO;AAAA,EACT,SACO,OAAO;AACZ,YAAQ,MAAM,iCAAiC,KAAK;AACpD,WAAO;AAAA,EACT;AACF;;;AC1FA,SAAS,gBAAAA,qBAAoB;AAC7B,OAAO,aAAa;AAEb,IAAM,gBAAN,cAA4BA,cAAmC;AAAA,EAC5D,SAAwB;AAAA,EACxB,aAAiC,CAAC;AAAA,EACzB;AAAA,EACA;AAAA,EAEjB,YAAY,OAAO,MAAM;AACvB,UAAM;AACN,SAAK,OAAO;AACZ,SAAK,MAAM,QAAQ;AACnB,SAAK,YAAY;AAAA,EACnB;AAAA,EAEA,QAAQ,YAAY;AAClB,WAAO,IAAI,QAAc,CAAC,YAAY;AACpC,WAAK,SAAS,KAAK,IAAI,OAAO,KAAK,MAAM,MAAM;AAC7C,gBAAQ,IAAI,6CAA6C,KAAK,IAAI,EAAE;AACpE,gBAAQ;AAAA,MACV,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EAEA,OAAO,YAAY;AACjB,WAAO,IAAI,QAAc,CAAC,YAAY;AACpC,WAAK,WAAW,QAAQ,SAAO,IAAI,IAAI,CAAC;AACxC,WAAK,aAAa,CAAC;AACnB,UAAI,KAAK,QAAQ;AACf,aAAK,OAAO,MAAM,MAAM;AACtB,kBAAQ,IAAI,qBAAqB;AACjC,kBAAQ;AAAA,QACV,CAAC;AAAA,MACH,OACK;AACH,gBAAQ;AAAA,MACV;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,OAAO,CAAC,SAAiB;AACvB,YAAQ,IAAI,oBAAoB,KAAK,WAAW,MAAM,UAAU;AAChE,SAAK,WAAW,QAAQ,CAAC,QAAQ;AAC/B,UAAI,MAAM,SAAS,IAAI;AAAA;AAAA,CAAM;AAAA,IAC/B,CAAC;AAAA,EACH;AAAA,EAEQ,cAAc,MAAM;AAC1B,SAAK,IAAI,KAAK,YAAY,QAAQ,KAAK,GAAG,CAAC,KAAsB,QAA0B;AACzF,YAAM,KAAuB,CAAC,aAAa;AACzC,YAAI,OAAO,GAAG,EAAE,KAAK,QAAQ;AAAA,MAC/B;AACA,WAAK,KAAK,QAAQ,IAAI,MAAM,EAAE;AAAA,IAChC,CAAC;AAED,SAAK,IAAI,IAAI,WAAW,KAAK,QAAQ;AAAA,EACvC;AAAA,EAEQ,WAAW,CAAC,KAAsB,QAA0B;AAClE,QAAI,UAAU,KAAK;AAAA,MACjB,gBAAgB;AAAA,MAChB,iBAAiB;AAAA,MACjB,cAAc;AAAA,IAChB,CAAC;AACD,QAAI,MAAM,IAAI;AAEd,SAAK,WAAW,KAAK,GAAG;AACxB,YAAQ,IAAI,sBAAsB;AAElC,QAAI,GAAG,SAAS,MAAM;AACpB,WAAK,aAAa,KAAK,WAAW,OAAO,YAAU,WAAW,GAAG;AACjE,cAAQ,IAAI,yBAAyB;AAAA,IACvC,CAAC;AAAA,EACH;AACF;;;ALjEA,IAAI,aAAgC;AACpC,IAAI,YAA+B;AAOnC,SAAS,cAAc,SAAiB,IAAsB;AAC5D,QAAM,UAAU,iBAAiB,OAAO;AACxC,MAAI,CAAC,SAAS;AACZ,UAAM,gBAAgB,oBAAoB,EAAE,KAAK,yBAAyB,CAAC;AAC3E,WAAO,GAAG,aAAa;AAAA,EACzB;AAEA,UAAQ,QAAQ,GAAG;AAAA,IACjB,KAAK,YAAY;AACf,cAAQ,IAAI,sCAAQ;AACpB,aAAO,GAAG,kBAAkB,CAAC;AAAA,IAE/B,KAAK,YAAY;AACf,cAAQ,IAAI,kDAAU;AACtB,aAAO,GAAG,cAAc,QAAQ,IAAI,MAAM,KAA2B,EAAE,CAAC;AAAA,IAE1E,KAAK,YAAY;AACf,cAAQ,IAAI,kDAAU;AACtB,aAAO,GAAG,aAAa,CAAC;AAAA,IAE1B;AACE,aAAO,GAAG,oBAAoB,EAAE,KAAK,kBAAkB,CAAC,CAAC;AAAA,EAC7D;AACF;AAEA,eAAe,OAAO;AACpB,eAAa,IAAI,WAAW;AAC5B,cAAY,IAAI,cAAc;AAG9B,YAAU,GAAG,QAAQ,CAAC,SAAS,OAAO;AACpC,kBAAc,SAAS,EAAE;AAAA,EAC3B,CAAC;AAGD,aAAW,GAAG,UAAU,CAAC,WAAW;AAClC,YAAQ,IAAI,6BAAS,MAAM;AAC3B,UAAM,QAAQ,kBAAkB,MAAiC;AACjE,eAAW,KAAK,KAAK;AAAA,EACvB,CAAC;AAED,MAAI;AACF,UAAM,WAAW,QAAQ;AACzB,YAAQ,IAAI,kDAAU;AACtB,UAAM,UAAU,MAAM;AAAA,EACxB,SACO,OAAO;AACZ,YAAQ,MAAM,KAAK;AAEnB,YAAQ,KAAK,CAAC;AAAA,EAChB;AAEA,MAAI;AACF,UAAM,WAAW,WAAW;AAC5B,YAAQ,IAAI,wDAAW;AAAA,EACzB,SACO,OAAO;AACZ,YAAQ,MAAM,KAAK;AAAA,EACrB;AACF;AAOA,SAAS,oBAAoB;AAC3B,UAAQ,IAAI,sCAAQ;AACpB,SAAO,qBAAqB,EAAE,KAAK,KAAK,CAAC;AAC3C;AAOA,SAAS,cAAc,MAAc;AACnC,UAAQ,IAAI,kDAAU;AACtB,cAAY,UAAU,IAAI;AAC1B,SAAO,qBAAqB,EAAE,KAAK,eAAe,CAAC;AACrD;AAMA,SAAS,eAAe;AACtB,UAAQ,IAAI,kDAAU;AACtB,cAAY,SAAS;AACrB,SAAO,qBAAqB,EAAE,KAAK,eAAe,CAAC;AACrD;AAEA,QAAQ,GAAG,UAAU,MAAM;AACzB,UAAQ,IAAI,2CAAa;AACzB,cAAY,WAAW;AACvB,aAAW,KAAK;AAChB,UAAQ,KAAK;AACf,CAAC;AAED,KAAK;","names":["EventEmitter"]}