{"version":3,"sources":["../src/index.ts","../src/app-controller.ts","../src/config.ts","../src/utils.ts","../src/logger.ts","../src/device-manager.ts","../src/blue-device.ts","../src/protocol.ts","../src/communication.ts","../src/heartbeat-manager.ts","../src/message-handler.ts","../src/serial-transport.ts"],"sourcesContent":["import process from 'process'\nimport { AppController } from './app-controller'\nimport { getLogger } from './logger'\n\nconst logger = getLogger()\nlet appController: AppController | null = null\n\n/**\n * 应用程序主函数\n */\nasync function main(): Promise<void> {\n  try {\n    logger.info('Main', '正在启动蓝牙设备检测系统...')\n\n    // 创建应用控制器\n    appController = new AppController()\n\n    // 初始化应用程序\n    await appController.initialize()\n\n    logger.info('Main', '蓝牙设备检测系统启动成功')\n  }\n  catch (error) {\n    logger.error('Main', '启动失败:', error)\n    process.exit(1)\n  }\n}\n\n/**\n * 处理进程信号，优雅关闭应用程序\n */\nprocess.on('SIGINT', async () => {\n  logger.info('Main', '\\n正在关闭程序...')\n  try {\n    if (appController) {\n      await appController.shutdown()\n    }\n    logger.info('Main', '程序已安全关闭')\n  }\n  catch (error) {\n    logger.error('Main', '关闭程序时发生错误:', error)\n  }\n  process.exit()\n})\n\n// 启动应用程序\nmain()\n","import type { ConfigManager } from './config'\nimport { EventEmitter } from 'events'\nimport { getConfigManager } from './config'\nimport { DeviceManager } from './device-manager'\nimport { HeartbeatManager } from './heartbeat-manager'\nimport { getLogger, parseLogLevel } from './logger'\nimport { MessageHandler } from './message-handler'\nimport { SerialTransport } from './serial-transport'\n\nconst logger = getLogger()\n\n/**\n * 应用程序主控制器\n * 负责应用程序的初始化、配置管理、组件协调和生命周期管理\n */\nexport class AppController extends EventEmitter {\n  private deviceManager: DeviceManager | null = null\n  private transport: SerialTransport | null = null\n  private messageHandler: MessageHandler | null = null\n  private heartbeatManager: HeartbeatManager | null = null\n  private isInitialized = false\n\n  /**\n   * 初始化应用程序\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      logger.warn('AppController', '应用程序已经初始化')\n      return\n    }\n\n    try {\n      // 获取配置管理器\n      const configManager = getConfigManager()\n\n      // 初始化日志管理器\n      this.initializeLogger(configManager)\n\n      // 验证配置\n      this.validateConfiguration(configManager)\n\n      // 初始化设备管理器\n      await this.initializeDeviceManager(configManager)\n\n      // 初始化传输层\n      await this.initializeTransport(configManager)\n\n      // 初始化消息处理器\n      this.initializeMessageHandler()\n\n      // 初始化心跳管理器\n      this.initializeHeartbeatManager()\n\n      // 设置事件监听器\n      this.setupEventListeners()\n\n      // 启动传输层\n      await this.startTransport()\n\n      // 初始化设备\n      await this.initializeDevices()\n\n      // 启动心跳\n      this.startHeartbeat()\n\n      this.isInitialized = true\n      logger.info('AppController', '应用程序初始化完成')\n    }\n    catch (error) {\n      logger.error('AppController', '应用程序初始化失败:', error)\n      throw error\n    }\n  }\n\n  /**\n   * 关闭应用程序\n   */\n  async shutdown(): Promise<void> {\n    logger.info('AppController', '正在关闭应用程序...')\n\n    try {\n      // 停止心跳\n      this.heartbeatManager?.stop()\n\n      // 断开所有设备\n      await this.deviceManager?.disconnectAll()\n\n      // 停止传输层\n      await this.transport?.stop()\n\n      this.isInitialized = false\n      logger.info('AppController', '应用程序已安全关闭')\n    }\n    catch (error) {\n      logger.error('AppController', '关闭应用程序时发生错误:', error)\n      throw error\n    }\n  }\n\n  /**\n   * 获取设备管理器\n   */\n  getDeviceManager(): DeviceManager | null {\n    return this.deviceManager\n  }\n\n  /**\n   * 获取传输层\n   */\n  getTransport(): SerialTransport | null {\n    return this.transport\n  }\n\n  /**\n   * 初始化日志管理器\n   */\n  private initializeLogger(configManager: ConfigManager) {\n    const loggingConfig = configManager.getLoggingConfig()\n    getLogger({\n      level: parseLogLevel(loggingConfig.level),\n      enableDevicePrefix: loggingConfig.enableDevicePrefix,\n      enableTimestamp: true,\n    })\n    logger.info('AppController', '日志管理器初始化完成')\n  }\n\n  /**\n   * 验证配置\n   */\n  private validateConfiguration(configManager: ConfigManager) {\n    const validation = configManager.validate()\n    if (!validation.valid) {\n      logger.error('AppController', '配置验证失败:')\n      validation.errors.forEach((error: string) => logger.error('AppController', `  - ${error}`))\n      throw new Error('配置验证失败')\n    }\n    logger.info('AppController', '配置验证通过')\n  }\n\n  /**\n   * 初始化设备管理器\n   */\n  private async initializeDeviceManager(configManager: ConfigManager) {\n    const config = configManager.getConfig()\n    const deviceConfigs = config.devices\n    if (deviceConfigs.length === 0) {\n      throw new Error('没有启用的设备配置')\n    }\n\n    logger.info('AppController', `加载了 ${deviceConfigs.length} 个设备配置:`)\n    deviceConfigs.forEach((device) => {\n      logger.info('AppController', `  - ${device.deviceId}: ${device.serialPath}`)\n    })\n\n    this.deviceManager = new DeviceManager(config)\n    logger.info('AppController', '设备管理器初始化完成')\n  }\n\n  /**\n   * 初始化传输层\n   */\n  private async initializeTransport(configManager: ConfigManager) {\n    const transportConfig = configManager.getTransportConfig()\n    this.transport = new SerialTransport(transportConfig)\n    logger.info('AppController', '传输层初始化完成')\n  }\n\n  /**\n   * 初始化消息处理器\n   */\n  private initializeMessageHandler() {\n    if (!this.deviceManager) {\n      throw new Error('设备管理器未初始化')\n    }\n    this.messageHandler = new MessageHandler(this.deviceManager)\n    logger.info('AppController', '消息处理器初始化完成')\n  }\n\n  /**\n   * 初始化心跳管理器\n   */\n  private initializeHeartbeatManager() {\n    if (!this.transport || !this.deviceManager) {\n      throw new Error('传输层或设备管理器未初始化')\n    }\n    this.heartbeatManager = new HeartbeatManager(this.transport, this.deviceManager)\n    logger.info('AppController', '心跳管理器初始化完成')\n  }\n\n  /**\n   * 设置事件监听器\n   */\n  private setupEventListeners() {\n    if (!this.transport || !this.deviceManager || !this.messageHandler) {\n      throw new Error('组件未完全初始化')\n    }\n\n    // 监听来自传输层的指令\n    this.transport.on('data', (message, cb) => {\n      this.messageHandler!.handleMessage(message, cb)\n    })\n\n    // 监听传输层错误事件\n    this.transport.on('error', (error, cb) => {\n      logger.error('AppController', '传输层错误:', error)\n      this.messageHandler!.handleError(error, cb)\n    })\n\n    // 监听设备管理器的设备事件，并通过传输层上报\n    this.deviceManager.on('device', (device) => {\n      const event = this.messageHandler!.handleDeviceEvent(device as Record<string, unknown>)\n      this.transport!.send(event)\n    })\n\n    // 监听设备连接事件\n    this.deviceManager.on('deviceConnected', (info) => {\n      logger.info('AppController', `设备 ${info.deviceId} (${info.serialPath}) 连接成功`)\n    })\n\n    // 监听设备断开连接事件\n    this.deviceManager.on('deviceDisconnected', (info) => {\n      logger.warn('AppController', `设备 ${info.deviceId} (${info.serialPath}) 断开连接`)\n    })\n\n    // 监听设备错误事件\n    this.deviceManager.on('deviceError', (error) => {\n      logger.error('AppController', `设备 ${error.deviceId} (${error.serialPath}) 发生错误:`, error.error)\n    })\n\n    logger.info('AppController', '事件监听器设置完成')\n  }\n\n  /**\n   * 启动传输层\n   */\n  private async startTransport() {\n    if (!this.transport) {\n      throw new Error('传输层未初始化')\n    }\n\n    await this.transport.start()\n    logger.info('AppController', '传输层启动成功')\n  }\n\n  /**\n   * 初始化设备\n   */\n  private async initializeDevices() {\n    if (!this.deviceManager) {\n      throw new Error('设备管理器未初始化')\n    }\n\n    await this.deviceManager.initializeDevices()\n    const stats = this.deviceManager.getConnectionStats()\n    logger.info('AppController', `设备初始化完成: ${stats.connected}/${stats.total} 个设备连接成功`)\n\n    if (stats.reconnecting > 0) {\n      logger.info('AppController', `${stats.reconnecting} 个设备正在重连中`)\n    }\n\n    if (stats.connected === 0 && stats.reconnecting === 0) {\n      throw new Error('没有设备连接成功')\n    }\n  }\n\n  /**\n   * 启动心跳\n   */\n  private startHeartbeat() {\n    if (!this.heartbeatManager) {\n      throw new Error('心跳管理器未初始化')\n    }\n\n    this.heartbeatManager.start()\n    logger.info('AppController', '心跳定时器已启动')\n  }\n}\n","import fs from 'fs'\nimport path from 'path'\nimport process from 'process'\nimport { z } from 'zod'\nimport { getLogger } from './logger'\n\nconst logger = getLogger()\n\n// 配置文件模式定义\nconst DeviceConfigSchema = z.object({\n  serialPath: z.string(),\n  deviceId: z.string().optional(),\n  baudRate: z.number().optional().default(115200),\n  enabled: z.boolean().optional().default(true),\n})\n\nconst SerialTransportConfigSchema = z.object({\n  serialPath: z.string(),\n  baudRate: z.number().optional().default(115200),\n  dataBits: z.number().optional().default(8),\n  stopBits: z.number().optional().default(1),\n  parity: z.enum(['none', 'even', 'odd']).optional().default('none'),\n  timeout: z.number().optional().default(5000), // 超时时间（毫秒）\n})\n\nconst AppConfigSchema = z.object({\n  devices: z.array(DeviceConfigSchema),\n  rssi: z.string().optional().default('-50'),\n  reportInterval: z.number().optional().default(5000),\n  serialTransport: SerialTransportConfigSchema.optional().default({ serialPath: '/dev/ttyUSB0', baudRate: 115200, dataBits: 8, stopBits: 1, parity: 'none', timeout: 5000 }),\n  logging: z.object({\n    level: z.enum(['debug', 'info', 'warn', 'error']).optional().default('info'),\n    enableDevicePrefix: z.boolean().optional().default(true),\n  }).optional().default({ level: 'info', enableDevicePrefix: true }),\n})\n\nexport type AppConfig = z.infer<typeof AppConfigSchema>\nexport type DeviceConfigWithOptions = z.infer<typeof DeviceConfigSchema>\nexport type SerialTransportConfig = z.infer<typeof SerialTransportConfigSchema>\n\nconst DEFAULT_CONFIG: AppConfig = {\n  devices: [\n    {\n      serialPath: '/dev/ttyUSB0',\n      deviceId: 'device_0',\n      baudRate: 115200,\n      enabled: true,\n    },\n  ],\n  rssi: '-50',\n  reportInterval: 5000,\n  serialTransport: {\n    serialPath: '/dev/ttyUSB1',\n    baudRate: 115200,\n    dataBits: 8,\n    stopBits: 1,\n    parity: 'none',\n    timeout: 5000,\n  },\n  logging: {\n    level: 'info',\n    enableDevicePrefix: true,\n  },\n}\n\n/**\n * 配置管理器\n */\nexport class ConfigManager {\n  private config: AppConfig\n  private configPath: string\n\n  constructor(configPath?: string) {\n    this.configPath = configPath || this.getDefaultConfigPath()\n    this.config = this.loadConfig()\n  }\n\n  /**\n   * 获取默认配置文件路径\n   */\n  private getDefaultConfigPath(): string {\n    // 优先使用环境变量指定的配置文件路径\n    if (process.env['CONFIG_PATH']) {\n      return process.env['CONFIG_PATH']\n    }\n\n    // 默认配置文件路径\n    return path.join(process.cwd(), 'config.json')\n  }\n\n  /**\n   * 加载配置\n   */\n  private loadConfig(): AppConfig {\n    try {\n      // 尝试从配置文件加载\n      if (fs.existsSync(this.configPath)) {\n        const configContent = fs.readFileSync(this.configPath, 'utf-8')\n        const jsonConfig = JSON.parse(configContent)\n        const validatedConfig = AppConfigSchema.parse(jsonConfig)\n        logger.info('ConfigManager', `从配置文件加载配置: ${this.configPath}`)\n        return validatedConfig\n      }\n\n      // 如果没有配置文件，创建默认配置文件\n      logger.info('ConfigManager', '未找到配置文件，创建默认配置')\n      this.saveConfig(DEFAULT_CONFIG)\n      return DEFAULT_CONFIG\n    }\n    catch (error) {\n      logger.error('ConfigManager', '加载配置失败，使用默认配置:', error)\n      return DEFAULT_CONFIG\n    }\n  }\n\n  /**\n   * 保存配置到文件\n   */\n  private saveConfig(config: AppConfig): void {\n    try {\n      const configContent = JSON.stringify(config, null, 2)\n      fs.writeFileSync(this.configPath, configContent, 'utf-8')\n      logger.info('ConfigManager', `配置已保存到: ${this.configPath}`)\n    }\n    catch (error) {\n      logger.error('ConfigManager', '保存配置失败:', error)\n    }\n  }\n\n  /**\n   * 获取完整配置\n   */\n  getConfig(): AppConfig {\n    return this.config\n  }\n\n  /**\n   * 获取设备配置列表\n   */\n  getDeviceConfigs(): DeviceConfigWithOptions[] {\n    return this.config.devices\n      .filter(device => device.enabled)\n  }\n\n  /**\n   * 获取传输层配置\n   */\n  getTransportConfig() {\n    return this.config.serialTransport\n  }\n\n  /**\n   * 获取日志配置\n   */\n  getLoggingConfig() {\n    return this.config.logging\n  }\n\n  /**\n   * 添加设备配置\n   */\n  addDevice(deviceConfig: DeviceConfigWithOptions): void {\n    this.config.devices.push(deviceConfig)\n    this.saveConfig(this.config)\n  }\n\n  /**\n   * 移除设备配置\n   */\n  removeDevice(serialPath: string): boolean {\n    const initialLength = this.config.devices.length\n    this.config.devices = this.config.devices.filter(device => device.serialPath !== serialPath)\n\n    if (this.config.devices.length < initialLength) {\n      this.saveConfig(this.config)\n      return true\n    }\n    return false\n  }\n\n  /**\n   * 启用/禁用设备\n   */\n  setDeviceEnabled(serialPath: string, enabled: boolean): boolean {\n    const device = this.config.devices.find(d => d.serialPath === serialPath)\n    if (device) {\n      device.enabled = enabled\n      this.saveConfig(this.config)\n      return true\n    }\n    return false\n  }\n\n  /**\n   * 重新加载配置\n   */\n  reload(): void {\n    this.config = this.loadConfig()\n  }\n\n  /**\n   * 验证配置\n   */\n  validate(): { valid: boolean, errors: string[] } {\n    const errors: string[] = []\n\n    // 检查设备配置\n    const enabledDevices = this.config.devices.filter(d => d.enabled)\n    if (enabledDevices.length === 0) {\n      errors.push('至少需要启用一个设备')\n    }\n\n    // 检查串口路径重复\n    const serialPaths = enabledDevices.map(d => d.serialPath)\n    const duplicates = serialPaths.filter((path, index) => serialPaths.indexOf(path) !== index)\n    if (duplicates.length > 0) {\n      errors.push(`串口路径重复: ${duplicates.join(', ')}`)\n    }\n\n    // 检查设备ID重复\n    const deviceIds = enabledDevices.map(d => d.deviceId).filter(Boolean)\n    const duplicateIds = deviceIds.filter((id, index) => deviceIds.indexOf(id) !== index)\n    if (duplicateIds.length > 0) {\n      errors.push(`设备ID重复: ${duplicateIds.join(', ')}`)\n    }\n\n    return {\n      valid: errors.length === 0,\n      errors,\n    }\n  }\n}\n\n// 全局配置管理器实例\nlet configManager: ConfigManager | null = null\n\n/**\n * 获取配置管理器实例\n */\nexport function getConfigManager(configPath?: string): ConfigManager {\n  if (!configManager) {\n    configManager = new ConfigManager(configPath)\n  }\n  return configManager\n}\n\n/**\n * 重置配置管理器实例（主要用于测试）\n */\nexport function resetConfigManager(): void {\n  configManager = null\n}\n","export function sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n\nexport function getFormattedDateTimeWithMilliseconds() {\n  const now = new Date()\n\n  const year = now.getFullYear()\n  const month = (now.getMonth() + 1).toString().padStart(2, '0')\n  const day = now.getDate().toString().padStart(2, '0')\n  const hours = now.getHours().toString().padStart(2, '0')\n  const minutes = now.getMinutes().toString().padStart(2, '0')\n  const seconds = now.getSeconds().toString().padStart(2, '0')\n  const milliseconds = now.getMilliseconds().toString().padStart(3, '0')\n\n  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}.${milliseconds}`\n}\n","import { getFormattedDateTimeWithMilliseconds } from './utils'\n\nexport enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n}\n\nexport interface LoggerConfig {\n  level: LogLevel\n  enableDevicePrefix: boolean\n  enableTimestamp: boolean\n}\n\nexport class Logger {\n  private config: LoggerConfig\n\n  constructor(config: Partial<LoggerConfig> = {}) {\n    this.config = {\n      level: config.level ?? LogLevel.INFO,\n      enableDevicePrefix: config.enableDevicePrefix ?? true,\n      enableTimestamp: config.enableTimestamp ?? true,\n    }\n  }\n\n  private formatMessage(level: string, component: string, message: string): string {\n    const parts: string[] = []\n\n    if (this.config.enableTimestamp) {\n      parts.push(getFormattedDateTimeWithMilliseconds())\n    }\n\n    parts.push(`[${level}]`)\n\n    if (component) {\n      parts.push(`[${component}]`)\n    }\n\n    parts.push(message)\n\n    return parts.join(' ')\n  }\n\n  private shouldLog(level: LogLevel): boolean {\n    return level >= this.config.level\n  }\n\n  debug(component: string, message: string, ...args: any[]): void {\n    if (this.shouldLog(LogLevel.DEBUG)) {\n      console.debug(this.formatMessage('DEBUG', component, message), ...args)\n    }\n  }\n\n  info(component: string, message: string, ...args: any[]): void {\n    if (this.shouldLog(LogLevel.INFO)) {\n      console.info(this.formatMessage('INFO', component, message), ...args)\n    }\n  }\n\n  warn(component: string, message: string, ...args: any[]): void {\n    if (this.shouldLog(LogLevel.WARN)) {\n      console.warn(this.formatMessage('WARN', component, message), ...args)\n    }\n  }\n\n  error(component: string, message: string, ...args: any[]): void {\n    if (this.shouldLog(LogLevel.ERROR)) {\n      console.error(this.formatMessage('ERROR', component, message), ...args)\n    }\n  }\n\n  // 设备专用日志方法\n  deviceDebug(deviceId: string, message: string, ...args: any[]): void {\n    this.debug(deviceId, message, ...args)\n  }\n\n  deviceInfo(deviceId: string, message: string, ...args: any[]): void {\n    this.info(deviceId, message, ...args)\n  }\n\n  deviceWarn(deviceId: string, message: string, ...args: any[]): void {\n    this.warn(deviceId, message, ...args)\n  }\n\n  deviceError(deviceId: string, message: string, ...args: any[]): void {\n    this.error(deviceId, message, ...args)\n  }\n\n  // 更新配置\n  updateConfig(config: Partial<LoggerConfig>): void {\n    this.config = { ...this.config, ...config }\n  }\n\n  // 获取当前配置\n  getConfig(): LoggerConfig {\n    return { ...this.config }\n  }\n}\n\n// 全局日志实例\nlet globalLogger: Logger | null = null\n\n/**\n * 获取全局日志实例\n */\nexport function getLogger(config?: Partial<LoggerConfig>): Logger {\n  if (!globalLogger) {\n    globalLogger = new Logger(config)\n  }\n  else if (config) {\n    globalLogger.updateConfig(config)\n  }\n  return globalLogger\n}\n\n/**\n * 重置全局日志实例（主要用于测试）\n */\nexport function resetLogger(): void {\n  globalLogger = null\n}\n\n/**\n * 将字符串日志级别转换为枚举\n */\nexport function parseLogLevel(level: string): LogLevel {\n  switch (level.toLowerCase()) {\n    case 'debug':\n      return LogLevel.DEBUG\n    case 'info':\n      return LogLevel.INFO\n    case 'warn':\n    case 'warning':\n      return LogLevel.WARN\n    case 'error':\n      return LogLevel.ERROR\n    default:\n      return LogLevel.INFO\n  }\n}\n","import type { AppConfig, DeviceConfigWithOptions } from './config'\nimport { EventEmitter } from 'events'\nimport { BlueDevice } from './blue-device'\nimport { getLogger } from './logger'\n\nconst logger = getLogger()\n\nexport interface DeviceInfo {\n  deviceId: string\n  serialPath: string\n  connected: boolean\n  initialized: boolean\n  scanning: boolean\n}\n\nexport class DeviceManager extends EventEmitter {\n  private config: AppConfig\n  private devices: Map<string, BlueDevice> = new Map()\n  private reconnectTimers: Map<string, NodeJS.Timeout> = new Map()\n  private reconnectAttempts: Map<string, number> = new Map()\n  private maxReconnectAttempts = 5\n  private reconnectDelay = 10000 // 10秒\n\n  constructor(config: AppConfig) {\n    super()\n    this.config = config\n  }\n\n  get deviceConfigs() {\n    return this.config.devices\n  }\n\n  /**\n   * 获取所有设备配置\n   */\n  getDeviceConfigs(): DeviceConfigWithOptions[] {\n    return [...this.deviceConfigs]\n  }\n\n  /**\n   * 初始化所有设备\n   */\n  async initializeDevices(): Promise<void> {\n    const initPromises = this.deviceConfigs.map(config => this.initializeDevice(config))\n    const results = await Promise.allSettled(initPromises)\n\n    // 记录初始化失败的设备\n    results.forEach((result, index) => {\n      if (result.status === 'rejected') {\n        const config = this.deviceConfigs[index]\n        logger.error('DeviceManager', `[${config?.deviceId || config?.serialPath}] 初始化失败:`, result.reason)\n      }\n    })\n  }\n\n  /**\n   * 初始化单个设备\n   */\n  private async initializeDevice(config: DeviceConfigWithOptions): Promise<void> {\n    const device = new BlueDevice(config.serialPath, config.deviceId, this.config.reportInterval)\n    const deviceId = device.getDeviceId()\n\n    // 监听设备事件并转发\n    device.on('device', (deviceData) => {\n      logger.info('DeviceManager', `[${deviceId}] 上报:`, deviceData)\n      this.emit('device', deviceData)\n    })\n\n    // 监听设备错误\n    device.on('error', (error) => {\n      logger.error('DeviceManager', `[${deviceId}] 错误:`, error)\n      this.emit('deviceError', {\n        deviceId,\n        serialPath: device.getSerialPath(),\n        error,\n      })\n    })\n\n    // 监听设备断开连接\n    device.on('disconnected', () => {\n      logger.warn('DeviceManager', `[${deviceId}] 断开连接`)\n      this.devices.delete(deviceId)\n      this.emit('deviceDisconnected', {\n        deviceId,\n        serialPath: device.getSerialPath(),\n      })\n\n      // 尝试重连\n      this.scheduleReconnect(config, deviceId)\n    })\n\n    try {\n      await device.connect()\n      logger.info('DeviceManager', `[${deviceId}] 连接成功`)\n\n      await device.initialize()\n      logger.info('DeviceManager', `[${deviceId}] 初始化完成`)\n\n      this.devices.set(deviceId, device)\n\n      this.emit('deviceConnected', {\n        deviceId,\n        serialPath: device.getSerialPath(),\n      })\n    }\n    catch (error) {\n      logger.error('DeviceManager', `[${deviceId}] 连接或初始化失败:`, error)\n      throw error\n    }\n  }\n\n  /**\n   * 获取所有设备信息\n   */\n  getDevicesInfo(): DeviceInfo[] {\n    return Array.from(this.devices.entries()).map(([deviceId, device]) => {\n      const status = device.getStatus()\n      return {\n        deviceId,\n        serialPath: device.getSerialPath(),\n        connected: status.connected,\n        initialized: status.initializeState === 'initialized',\n        scanning: status.isScanning,\n      }\n    })\n  }\n\n  /**\n   * 获取特定设备\n   */\n  getDevice(deviceId: string): BlueDevice | undefined {\n    return this.devices.get(deviceId)\n  }\n\n  /**\n   * 获取所有设备\n   */\n  getAllDevices(): BlueDevice[] {\n    return Array.from(this.devices.values())\n  }\n\n  /**\n   * 启动扫描 - 支持指定设备或所有设备\n   */\n  async startScan(rssi: string = this.config.rssi, deviceId?: string): Promise<void> {\n    if (deviceId) {\n      // 启动指定设备的扫描\n      const device = this.devices.get(deviceId)\n      if (!device) {\n        throw new Error(`设备 ${deviceId} 不存在`)\n      }\n      await device.startScan(rssi)\n      logger.info('DeviceManager', `[${deviceId}] 开始上报`)\n    }\n    else {\n      // 启动所有设备的扫描\n      const startPromises = Array.from(this.devices.entries()).map(async ([id, device]) => {\n        try {\n          await device.startScan(rssi)\n          logger.info('DeviceManager', `[${id}] 开始扫描`)\n        }\n        catch (error) {\n          logger.error('DeviceManager', `[${id}] 启动扫描失败:`, error)\n        }\n      })\n      await Promise.allSettled(startPromises)\n    }\n  }\n\n  /**\n   * 停止扫描 - 支持指定设备或所有设备\n   */\n  async stopScan(deviceId?: string): Promise<void> {\n    if (deviceId) {\n      // 停止指定设备的扫描\n      const device = this.devices.get(deviceId)\n      if (!device) {\n        throw new Error(`设备 ${deviceId} 不存在`)\n      }\n      await device.stopScan()\n      logger.info('DeviceManager', `[${deviceId}] 停止扫描`)\n    }\n    else {\n      // 停止所有设备的扫描\n      const stopPromises = Array.from(this.devices.entries()).map(async ([id, device]) => {\n        try {\n          await device.stopScan()\n          logger.info('DeviceManager', `[${id}] 停止扫描`)\n        }\n        catch (error) {\n          logger.error('DeviceManager', `[${id}] 停止扫描失败:`, error)\n        }\n      })\n      await Promise.allSettled(stopPromises)\n    }\n  }\n\n  /**\n   * 启动上报 - 支持指定设备或所有设备\n   */\n  async startReport(deviceId?: string): Promise<void> {\n    if (deviceId) {\n      // 启动指定设备的扫描\n      const device = this.devices.get(deviceId)\n      if (!device) {\n        throw new Error(`设备 ${deviceId} 不存在`)\n      }\n      await device.startReport()\n      logger.info('DeviceManager', `[${deviceId}] 开始上报`)\n    }\n    else {\n      // 启动所有设备的扫描\n      const startPromises = Array.from(this.devices.entries()).map(async ([id, device]) => {\n        try {\n          await device.startReport()\n          logger.info('DeviceManager', `[${id}] 开始上报`)\n        }\n        catch (error) {\n          logger.error('DeviceManager', `[${id}] 启动上报失败:`, error)\n        }\n      })\n      await Promise.allSettled(startPromises)\n    }\n  }\n\n  /**\n   * 停止上报 - 支持指定设备或所有设备\n   */\n  async stopReport(deviceId?: string): Promise<void> {\n    if (deviceId) {\n      // 停止指定设备的扫描\n      const device = this.devices.get(deviceId)\n      if (!device) {\n        throw new Error(`设备 ${deviceId} 不存在`)\n      }\n      await device.stopReport()\n      logger.info('DeviceManager', `[${deviceId}] 停止上报`)\n    }\n    else {\n      // 停止所有设备的扫描\n      const stopPromises = Array.from(this.devices.entries()).map(async ([id, device]) => {\n        try {\n          await device.stopReport()\n          logger.info('DeviceManager', `[${id}] 停止上报`)\n        }\n        catch (error) {\n          logger.error('DeviceManager', `[${id}] 停止上报失败:`, error)\n        }\n      })\n      await Promise.allSettled(stopPromises)\n    }\n  }\n\n  /**\n   * 断开所有设备连接\n   */\n  async disconnectAll(): Promise<void> {\n    // 取消所有重连定时器\n    this.cancelAllReconnectTimers()\n\n    const disconnectPromises = Array.from(this.devices.entries()).map(async ([id, device]) => {\n      try {\n        await device.disconnect()\n        logger.info('DeviceManager', `[${id}] 断开连接`)\n      }\n      catch (error) {\n        logger.error('DeviceManager', `[${id}] 断开连接失败:`, error)\n      }\n    })\n\n    await Promise.allSettled(disconnectPromises)\n    this.devices.clear()\n  }\n\n  /**\n   * 重新连接失败的设备\n   */\n  async reconnectFailedDevices(): Promise<void> {\n    const connectedDeviceIds = new Set(this.devices.keys())\n    const failedConfigs = this.deviceConfigs.filter((config) => {\n      const deviceId = config.deviceId || config.serialPath.replace(/[^a-z0-9]/gi, '_')\n      return !connectedDeviceIds.has(deviceId)\n    })\n\n    if (failedConfigs.length > 0) {\n      logger.info('DeviceManager', `尝试重新连接 ${failedConfigs.length} 个失败的设备`)\n      const reconnectPromises = failedConfigs.map(config => this.initializeDevice(config))\n      await Promise.allSettled(reconnectPromises)\n    }\n  }\n\n  /**\n   * 调度设备重连\n   */\n  private scheduleReconnect(config: DeviceConfigWithOptions, deviceId: string) {\n    const attempts = this.reconnectAttempts.get(deviceId) || 0\n\n    if (attempts >= this.maxReconnectAttempts) {\n      logger.error('DeviceManager', `[${deviceId}] 重连次数已达上限 (${this.maxReconnectAttempts})，停止重连`)\n      this.reconnectAttempts.delete(deviceId)\n      return\n    }\n\n    const delay = this.reconnectDelay * 2 ** attempts // 指数退避\n    logger.info('DeviceManager', `将在 ${delay}ms 后尝试重连设备 ${deviceId} (第 ${attempts + 1} 次)`)\n\n    const timer = setTimeout(async () => {\n      try {\n        logger.info('DeviceManager', `开始重连设备 ${deviceId}`)\n        await this.initializeDevice(config)\n        this.reconnectAttempts.delete(deviceId)\n        logger.info('DeviceManager', `设备 ${deviceId} 重连成功`)\n      }\n      catch (error) {\n        logger.error('DeviceManager', `[${deviceId}] 重连失败:`, error)\n        this.reconnectAttempts.set(deviceId, attempts + 1)\n        this.scheduleReconnect(config, deviceId)\n      }\n      this.reconnectTimers.delete(deviceId)\n    }, delay)\n\n    this.reconnectTimers.set(deviceId, timer)\n    this.reconnectAttempts.set(deviceId, attempts + 1)\n  }\n\n  /**\n   * 取消所有重连定时器\n   */\n  private cancelAllReconnectTimers() {\n    this.reconnectTimers.forEach((timer, deviceId) => {\n      logger.info('DeviceManager', `取消设备 ${deviceId} 的重连定时器`)\n      clearTimeout(timer)\n    })\n    this.reconnectTimers.clear()\n    this.reconnectAttempts.clear()\n  }\n\n  /**\n   * 获取连接状态统计\n   */\n  getConnectionStats(): { total: number, connected: number, failed: number, reconnecting: number } {\n    return {\n      total: this.deviceConfigs.length,\n      connected: this.devices.size,\n      failed: this.deviceConfigs.length - this.devices.size - this.reconnectTimers.size,\n      reconnecting: this.reconnectTimers.size,\n    }\n  }\n}\n","import { EventEmitter } from 'events'\nimport { ReadlineParser } from '@serialport/parser-readline'\nimport { SerialPort } from 'serialport'\nimport { getLogger } from './logger'\nimport { buildEnterCommandMode, buildObserverCommand, buildRestartCommand, buildSetRoleCommand, buildStopObserverCommand } from './protocol'\nimport { sleep } from './utils'\n\nconst logger = getLogger()\n\n// 厂商字典\nconst MANUFACTURER_DICT = {\n  '0001': 'Nokia Mobile Phones',\n  // '0006': 'Microsoft',\n  '0008': 'Motorola',\n  '004C': 'Apple, Inc.',\n  '0056': 'Sony Ericsson Mobile Communications',\n  '0075': 'Samsung Electronics Co. Ltd.',\n  '00C4': 'LG Electronics',\n  '00EO': 'Google',\n} as const\n\ninterface DetectionResult {\n  mf: string\n  timestamp: number\n}\n\nexport class BlueDevice extends EventEmitter {\n  private port: SerialPort | null = null\n  private initializeState: 'uninitialized' | 'initializing' | 'initialized' = 'uninitialized'\n  private isScanning = false\n  private deleteDeviceList: Set<string> = new Set()\n  private readonly serialPath: string\n  private readonly deviceId: string\n  private readonly reportInterval: number\n  private reportTimer: NodeJS.Timeout | null = null\n  private enableReport = false\n  // 检测结果列表\n  private detectionResultList: DetectionResult[] = []\n\n  constructor(serialPath: string = '/dev/ttyUSB0', deviceId?: string, reportInterval: number = 5000) {\n    super()\n    this.port = null\n    this.serialPath = serialPath\n    this.deviceId = deviceId || serialPath.replace(/[^a-z0-9]/gi, '_')\n    this.reportInterval = reportInterval\n  }\n\n  /**\n   * 获取设备ID\n   */\n  getDeviceId(): string {\n    return this.deviceId\n  }\n\n  /**\n   * 获取串口路径\n   */\n  getSerialPath(): string {\n    return this.serialPath\n  }\n\n  /**\n   * 获取设备状态\n   */\n  getStatus() {\n    return {\n      deviceId: this.deviceId,\n      serialPath: this.serialPath,\n      connected: this.port !== null,\n      initializeState: this.initializeState,\n      isScanning: this.isScanning,\n    }\n  }\n\n  /**\n   * 检查是否正在扫描\n   */\n  isCurrentlyScanning(): boolean {\n    return this.isScanning\n  }\n\n  async connect() {\n    return new Promise((resolve, reject) => {\n      this.port = new SerialPort({\n        path: this.serialPath,\n        baudRate: 115200,\n        dataBits: 8,\n        stopBits: 1,\n        parity: 'none',\n        autoOpen: false,\n      }, (err) => {\n        if (err) {\n          reject(err)\n        }\n      })\n\n      const parser = this.port.pipe(new ReadlineParser({ delimiter: '\\r\\n' }))\n\n      this.port.on('open', () => {\n        resolve(this.port)\n      })\n\n      this.port.on('error', (err) => {\n        logger.error('BlueDevice', `[${this.deviceId}] 串口错误:`, err)\n        this.emit('error', err)\n        reject(err)\n      })\n\n      this.port.on('close', () => {\n        logger.warn('BlueDevice', `[${this.deviceId}] 串口连接关闭`)\n        this.emit('disconnected', { deviceId: this.deviceId, serialPath: this.serialPath })\n        reject(new Error('串口关闭'))\n      })\n\n      parser.on('data', (data) => {\n        logger.debug('BlueDevice', `[${this.deviceId}] 接收数据:`, data)\n        this.parseData(data)\n      })\n\n      this.port.open()\n    })\n  }\n\n  async disconnect() {\n    this.stopReport()\n    await this.stopScan()\n    this.port?.close()\n  }\n\n  async send(data: string) {\n    logger.debug('BlueDevice', `[${this.deviceId}] 发送数据:`, data)\n    return new Promise<void>((resolve, reject) => {\n      if (!this.port) {\n        const error = new Error('串口未连接')\n        logger.error('BlueDevice', `[${this.deviceId}] 发送数据失败:`, error.message)\n        this.emit('error', error)\n        reject(error)\n        return\n      }\n\n      this.port.write(data, (err) => {\n        if (err) {\n          logger.error('BlueDevice', `[${this.deviceId}] 发送数据时出错:`, err.message)\n          this.emit('error', err)\n          reject(err)\n        }\n        else {\n          resolve()\n        }\n      })\n    })\n  }\n\n  async parseData(data: string) {\n    const advStr = data.split(',')?.[2]?.split(':')?.[1]\n\n    if (!advStr) {\n      return\n    }\n\n    const splitStrIndex = advStr.indexOf('FF')\n    const splitStr = advStr.substring(splitStrIndex, splitStrIndex + 2)\n\n    if (splitStr !== 'FF') return\n\n    const targetStr = advStr.substring(splitStrIndex + 4, splitStrIndex + 6) + advStr.substring(splitStrIndex + 2, splitStrIndex + 4)\n    const manufacturer = MANUFACTURER_DICT[targetStr as keyof typeof MANUFACTURER_DICT]\n    // 如果厂商不存在，则不处理\n    if (!manufacturer) return\n\n    // 添加检测结果\n    this.addDetectionResult({\n      mf: manufacturer,\n      timestamp: Date.now(),\n    })\n\n    const hasDevice = this.deleteDeviceList.has(targetStr)\n    // 如果设备已被检测，则不处理\n    if (hasDevice) return\n\n    // 如果未开启上报，则不处理\n    if (!this.enableReport) return\n\n    this.emit('device', {\n      mf: manufacturer,\n    })\n    this.deleteDeviceList.add(targetStr)\n  }\n\n  /**\n   * 发送数据并等待\n   * @param data 数据\n   * @param sleepTime 等待时间\n   */\n  async sendAndSleep(data: string, sleepTime = 0) {\n    try {\n      await this.send(data)\n      if (sleepTime > 0) {\n        await sleep(sleepTime)\n      }\n    }\n    catch (error) {\n      logger.error('BlueDevice', `[${this.deviceId}] 发送指令失败:`, error)\n      throw error\n    }\n  }\n\n  async initialize() {\n    if (this.initializeState === 'initializing' || this.initializeState === 'initialized') {\n      return\n    }\n\n    logger.info('BlueDevice', `[${this.deviceId}] 开始初始化设备...`)\n    this.initializeState = 'initializing'\n\n    try {\n      // 重启设备\n      await this.sendAndSleep(buildRestartCommand(), 3000)\n\n      // 进入AT命令模式\n      await this.sendAndSleep(buildEnterCommandMode(), 500)\n\n      // 设置设备为单主角色\n      await this.sendAndSleep(buildSetRoleCommand(), 500)\n\n      // 重启设备\n      await this.sendAndSleep(buildRestartCommand(), 2000)\n\n      // 进入AT命令模式\n      await this.sendAndSleep(buildEnterCommandMode(), 1000)\n\n      this.initializeState = 'initialized'\n\n      // 开始扫描\n      await this.startScan()\n\n      logger.info('BlueDevice', `[${this.deviceId}] 设备初始化完成`)\n    }\n    catch (error) {\n      this.initializeState = 'uninitialized'\n      logger.error('BlueDevice', `[${this.deviceId}] 设备初始化失败:`, error)\n      this.emit('error', error)\n      throw error\n    }\n  }\n\n  async startScan(rssi = '-50') {\n    try {\n      if (this.initializeState === 'uninitialized') {\n        await this.initialize()\n      }\n\n      if (this.initializeState === 'initializing') {\n        logger.error('BlueDevice', `[${this.deviceId}] 设备初始化中，请稍后再试`)\n        throw new Error('设备初始化中')\n      }\n\n      if (this.isScanning) {\n        logger.info('BlueDevice', `[${this.deviceId}] 设备已在扫描中`)\n        return\n      }\n\n      logger.info('BlueDevice', `[${this.deviceId}] 开始扫描，RSSI阈值: ${rssi}`)\n      this.isScanning = true\n\n      // 设置设备为观察者模式\n      await this.sendAndSleep(buildObserverCommand(rssi))\n      logger.info('BlueDevice', `[${this.deviceId}] 扫描已启动`)\n    }\n    catch (error) {\n      this.isScanning = false\n      logger.error('BlueDevice', `[${this.deviceId}] 启动扫描失败:`, error)\n      this.emit('error', error)\n      throw error\n    }\n  }\n\n  async stopScan() {\n    try {\n      if (!this.isScanning) {\n        logger.info('BlueDevice', `[${this.deviceId}] 设备未在扫描中`)\n        return\n      }\n\n      logger.info('BlueDevice', `[${this.deviceId}] 停止扫描`)\n      // 停止扫描\n      await this.sendAndSleep(buildStopObserverCommand())\n      this.isScanning = false\n      logger.info('BlueDevice', `[${this.deviceId}] 扫描已停止`)\n      // 停止定时清除已检测设备\n      this.stopReportTimer()\n    }\n    catch (error) {\n      logger.error('BlueDevice', `[${this.deviceId}] 停止扫描失败:`, error)\n      this.emit('error', error)\n      throw error\n    }\n  }\n\n  async startReport() {\n    this.enableReport = true\n    // 启动定时清除已检测设备\n    this.startReportTimer()\n\n    const manufacturer = [...new Set(this.detectionResultList.map(item => item.mf))].join(',')\n    if (!manufacturer) return\n    logger.info('BlueDevice', `[${this.deviceId}] 缓冲区检测结果:`, manufacturer)\n\n    this.emit('device', {\n      mf: manufacturer,\n    })\n  }\n\n  async stopReport() {\n    // 停止定时清除已检测设备\n    this.stopReportTimer()\n    this.enableReport = false\n  }\n\n  addDetectionResult(result: DetectionResult) {\n    // 最大保留时间\n    const maxRetentionTime = 1000\n    // 删除过期数据\n    this.detectionResultList = this.detectionResultList.filter(item => Date.now() - item.timestamp < maxRetentionTime)\n    // 添加新数据\n    this.detectionResultList.push(result)\n  }\n\n  /**\n   * 重启设备\n   */\n  async restart() {\n    await this.sendAndSleep(buildRestartCommand())\n  }\n\n  // 启动定时清除已检测设备\n  private startReportTimer() {\n    this.deleteDeviceList.clear()\n    this.reportTimer = setInterval(() => {\n      this.deleteDeviceList.clear()\n    }, this.reportInterval)\n  }\n\n  // 停止定时清除已检测设备\n  private stopReportTimer() {\n    if (this.reportTimer) {\n      clearInterval(this.reportTimer)\n      this.reportTimer = null\n    }\n  }\n}\n","const AT_COMMAND_SUFFIX = '\\r\\n' // 所有 AT 命令都必须以回车换行符结尾\nconst AT_COMMAND_PREFIX = 'AT' // 所有 AT 命令都必须以 AT 开头\nconst AT_COMMAND_MODE = '+++' // 进入AT命令模式,无需回车换行符\n\nconst AT_RESTART = 'RESTART'\nconst AT_SET_ROLE = 'ROLE=1'\nconst AT_GET_ROLE = 'ROLE?'\nconst AT_START_OBSERVER = 'OBSERVER=1,4,,,'\nconst AT_STOP_OBSERVER = 'OBSERVER=0'\n\n/**\n * 进入AT命令模式\n */\nexport function buildEnterCommandMode() {\n  return `${AT_COMMAND_MODE}`\n}\n\n/**\n * 重启设备\n */\nexport function buildRestartCommand() {\n  return `${AT_COMMAND_PREFIX}+${AT_RESTART}${AT_COMMAND_SUFFIX}`\n}\n\n/**\n * 设置设备为单主角色\n */\nexport function buildSetRoleCommand() {\n  return `${AT_COMMAND_PREFIX}+${AT_SET_ROLE}${AT_COMMAND_SUFFIX}`\n}\n\n/**\n * 获取设备角色\n */\nexport function buildQueryRoleCommand() {\n  return `${AT_COMMAND_PREFIX}+${AT_GET_ROLE}${AT_COMMAND_SUFFIX}`\n}\n\n/**\n * 获取设备角色\n */\nexport function parseQueryRoleCommand(data: string) {\n  return data.split('=')[1]\n}\n\n/**\n * 设置设备为观察者模式\n */\nexport function buildObserverCommand(rssi = '-60') {\n  return `${AT_COMMAND_PREFIX}+${AT_START_OBSERVER}${rssi}${AT_COMMAND_SUFFIX}`\n}\n\n/**\n * 停止观察者模式\n */\nexport function buildStopObserverCommand() {\n  return `${AT_COMMAND_PREFIX}+${AT_STOP_OBSERVER}${AT_COMMAND_SUFFIX}`\n}\n","import { z } from 'zod'\nimport { getLogger } from './logger'\n\nconst logger = getLogger()\n\n// 1. 编码字典\n\n// 命令码 (上位机 -> 程序)\nexport const CommandCode = {\n  START: 1,\n  STOP: 2,\n} as const\n\n// 事件/响应码 (程序 -> 上位机)\nexport const EventTypeCode = {\n  STATUS: 1,\n  ERROR: 2,\n  DEVICE: 3,\n  HEARTBEAT: 4,\n} as const\n\n// 2. 通信格式定义\n\n// 请求格式 (上位机 -> 程序)\nconst RequestSchema = z.object({\n  c: z.nativeEnum(CommandCode),\n  d: z.record(z.unknown()).optional(),\n})\n\n// 请求数据格式\nexport const RequestDataSchema = z.object({\n  rssi: z.string().optional(),\n}).passthrough() // 允许其他字段通过\n\n// 响应/上报格式 (程序 -> 上位机)\nexport const ResponseSchema = z.object({\n  t: z.nativeEnum(EventTypeCode),\n  d: z.record(z.unknown()),\n})\n\nexport type RequestPayload = z.infer<typeof RequestSchema>\nexport type ResponsePayload = z.infer<typeof ResponseSchema>\nexport type RequestData = z.infer<typeof RequestDataSchema>\n\n// 3. 消息创建辅助函数\n\n/**\n * 创建一个标准的状态响应\n * @param data 负载数据\n */\nexport function createStatusResponse(data: Record<string, unknown>): string {\n  const payload: ResponsePayload = {\n    t: EventTypeCode.STATUS,\n    d: data,\n  }\n  return JSON.stringify(payload)\n}\n\n/**\n * 创建一个标准的错误响应\n * @param message 错误消息\n */\nexport function createErrorResponse(message: string): string {\n  const payload: ResponsePayload = {\n    t: EventTypeCode.ERROR,\n    d: {\n      msg: message,\n    },\n  }\n  return JSON.stringify(payload)\n}\n\n/**\n * 创建一个设备上报消息\n * @param data 负载数据\n */\nexport function createDeviceEvent(data: Record<string, unknown>): string {\n  const payload: ResponsePayload = {\n    t: EventTypeCode.DEVICE,\n    d: data,\n  }\n  return JSON.stringify(payload)\n}\n\n/**\n * 创建一个心跳事件消息\n * @param data 负载数据\n */\nexport function createHeartbeatEvent(data: Record<string, unknown>): string {\n  const payload: ResponsePayload = {\n    t: EventTypeCode.HEARTBEAT,\n    d: data,\n  }\n  return JSON.stringify(payload)\n}\n\n/**\n * 解析传入的 JSON 消息\n * @param message 字符串消息\n * @returns 解析后的数据或在无效时返回 null\n */\nexport function parseJSONMessage(message: string): RequestPayload | null {\n  try {\n    const json = JSON.parse(message)\n    const validation = RequestSchema.safeParse(json)\n    if (validation.success) {\n      return validation.data\n    }\n    logger.error('parseJSONMessage', 'Invalid message format:', validation.error)\n    return null\n  }\n  catch (error) {\n    logger.error('parseJSONMessage', 'Failed to parse JSON message:', error)\n    return null\n  }\n}\n\n/**\n * 解析请求数据部分\n * @param data 请求数据对象\n * @returns 解析后的请求数据或在无效时返回 null\n */\nexport function parseRequestData(data: unknown): RequestData | null {\n  try {\n    const validation = RequestDataSchema.safeParse(data)\n    if (validation.success) {\n      return validation.data\n    }\n    logger.error('parseRequestData', 'Invalid request data format:', validation.error)\n    return null\n  }\n  catch (error) {\n    logger.error('parseRequestData', 'Failed to parse request data:', error)\n    return null\n  }\n}\n","import type { DeviceManager } from './device-manager'\nimport type { SerialTransport } from './serial-transport'\nimport { createHeartbeatEvent } from './communication'\nimport { getLogger } from './logger'\n\nconst logger = getLogger()\n\n/**\n * 心跳管理器\n * 负责心跳定时器的管理和心跳事件发送\n */\nexport class HeartbeatManager {\n  private transport: SerialTransport\n  private deviceManager: DeviceManager\n  private heartbeatTimer: NodeJS.Timeout | null = null\n  private readonly heartbeatInterval: number = 2000 // 2秒\n\n  constructor(transport: SerialTransport, deviceManager: DeviceManager) {\n    this.transport = transport\n    this.deviceManager = deviceManager\n  }\n\n  /**\n   * 启动心跳定时器\n   */\n  start(): void {\n    if (this.heartbeatTimer) {\n      logger.warn('HeartbeatManager', '心跳定时器已经在运行')\n      return\n    }\n\n    this.heartbeatTimer = setInterval(() => {\n      this.sendHeartbeat()\n    }, this.heartbeatInterval)\n\n    logger.info('HeartbeatManager', `心跳定时器已启动，间隔: ${this.heartbeatInterval}ms`)\n  }\n\n  /**\n   * 停止心跳定时器\n   */\n  stop(): void {\n    if (this.heartbeatTimer) {\n      clearInterval(this.heartbeatTimer)\n      this.heartbeatTimer = null\n      logger.info('HeartbeatManager', '心跳定时器已停止')\n    }\n  }\n\n  /**\n   * 发送心跳事件\n   */\n  private sendHeartbeat(): void {\n    try {\n      const stats = this.deviceManager.getConnectionStats()\n      const heartbeatData = createHeartbeatEvent({\n        run: stats.connected > 0,\n      })\n\n      this.transport.send(heartbeatData)\n      logger.debug('HeartbeatManager', '心跳事件已发送', { connected: stats.connected })\n    }\n    catch (error) {\n      logger.error('HeartbeatManager', '发送心跳事件失败:', error)\n    }\n  }\n\n  /**\n   * 获取心跳状态\n   */\n  isRunning(): boolean {\n    return this.heartbeatTimer !== null\n  }\n\n  /**\n   * 设置心跳间隔（仅在停止状态下有效）\n   */\n  setInterval(interval: number): void {\n    if (this.heartbeatTimer) {\n      logger.warn('HeartbeatManager', '心跳定时器正在运行，无法修改间隔')\n      return\n    }\n\n    if (interval < 1000) {\n      logger.warn('HeartbeatManager', '心跳间隔不能小于1000ms，使用默认值2000ms')\n      return\n    }\n\n    // 这里可以添加间隔设置逻辑，但由于当前是常量，暂时保留接口\n    logger.info('HeartbeatManager', `心跳间隔设置为: ${interval}ms`)\n  }\n}\n","import type { DeviceManager } from './device-manager'\nimport type { ResponseCallback } from './serial-transport'\nimport {\n  CommandCode,\n  createDeviceEvent,\n  createErrorResponse,\n  createStatusResponse,\n  parseRequestData,\n  type RequestPayload,\n} from './communication'\nimport { getLogger } from './logger'\n\nconst logger = getLogger()\n\n/**\n * 消息处理器\n * 负责处理来自传输层的消息和命令分发\n */\nexport class MessageHandler {\n  private deviceManager: DeviceManager\n\n  constructor(deviceManager: DeviceManager) {\n    this.deviceManager = deviceManager\n  }\n\n  /**\n   * 处理来自传输层的消息\n   * @param message JSON 字符串消息\n   * @param cb      响应回调\n   */\n  async handleMessage(message: RequestPayload, cb: ResponseCallback): Promise<void> {\n    const request = message\n    if (!request) {\n      const errorResponse = createErrorResponse('Invalid message format')\n      return cb(errorResponse)\n    }\n\n    try {\n      switch (request.c) {\n        case CommandCode.START:\n          return cb(await this.handleStartCommand(request.d))\n\n        case CommandCode.STOP:\n          return cb(await this.handleStopCommand())\n\n        default:\n          return cb(createErrorResponse('Unknown command'))\n      }\n    }\n    catch (error: any) {\n      logger.error('MessageHandler', '处理指令时发生错误:', error)\n      return cb(createErrorResponse(error.message || 'Failed to execute command'))\n    }\n  }\n\n  /**\n   * 处理错误\n   * @param error 错误信息\n   * @param cb    响应回调\n   */\n  handleError(error: string, cb: ResponseCallback): void {\n    cb(createErrorResponse(error))\n  }\n\n  /**\n   * 处理设备事件\n   * @param device 设备数据\n   * @returns 设备事件消息\n   */\n  handleDeviceEvent(device: Record<string, unknown>): string {\n    // 创建设备事件消息\n    return createDeviceEvent(device)\n  }\n\n  /**\n   * 处理启动扫描指令\n   * @param requestData 请求数据\n   * @returns 启动扫描响应\n   */\n  private async handleStartCommand(requestData: unknown): Promise<string> {\n    const data = parseRequestData(requestData)\n    const rssi = data?.rssi || '-60'\n\n    logger.info('MessageHandler', '收到启动扫描指令', { rssi })\n\n    // try {\n    //   await this.deviceManager.startScan(rssi)\n    //   logger.info('MessageHandler', '所有设备开始扫描')\n    //   return createStatusResponse({ msg: 'Scan started' })\n    // }\n    // catch (error: any) {\n    //   logger.error('MessageHandler', '启动扫描失败:', error)\n    //   return createErrorResponse(error.message || 'Failed to start scan')\n    // }\n\n    try {\n      await this.deviceManager.startReport()\n      logger.info('MessageHandler', '所有设备开始上报')\n      return createStatusResponse({ msg: 'Report started' })\n    }\n    catch (error: any) {\n      logger.error('MessageHandler', '启动上报失败:', error)\n      return createErrorResponse(error.message || 'Failed to start report')\n    }\n  }\n\n  /**\n   * 处理停止扫描指令\n   * @returns 停止扫描响应\n   */\n  private async handleStopCommand(): Promise<string> {\n    // try {\n    //   await this.deviceManager.stopScan()\n    //   logger.info('MessageHandler', '所有设备停止扫描')\n    //   return createStatusResponse({ msg: 'Scan stopped' })\n    // }\n    // catch (error: any) {\n    //   logger.error('MessageHandler', '停止扫描失败:', error)\n    //   return createErrorResponse(error.message || 'Failed to stop scan')\n    // }\n\n    try {\n      await this.deviceManager.stopReport()\n      logger.info('MessageHandler', '所有设备停止上报')\n      return createStatusResponse({ msg: 'Report stopped' })\n    }\n    catch (error: any) {\n      logger.error('MessageHandler', '停止上报失败:', error)\n      return createErrorResponse(error.message || 'Failed to stop report')\n    }\n  }\n}\n","import type { Buffer } from 'buffer'\nimport type { RequestPayload } from './communication'\nimport type { SerialTransportConfig } from './config'\nimport { EventEmitter } from 'events'\nimport { ReadlineParser } from '@serialport/parser-readline'\nimport { SerialPort } from 'serialport'\nimport { parseJSONMessage } from './communication'\nimport { getLogger } from './logger'\n\nconst logger = getLogger()\n\nexport type ResponseCallback = (response: string) => void\n\n/**\n * 串口传输层实现\n * 通过串口与上位机进行双向通信\n */\nexport class SerialTransport extends EventEmitter {\n  private port: SerialPort | null = null\n  private parser: ReadlineParser | null = null\n  private readonly config: SerialTransportConfig\n  private isConnected = false\n  private reconnectTimer: NodeJS.Timeout | null = null\n  private readonly reconnectInterval = 5000 // 重连间隔（毫秒）\n  private readonly maxReconnectAttempts = 10\n  private reconnectAttempts = 0\n\n  // 事件类型定义\n  override on(event: 'data', listener: (data: RequestPayload, cb: ResponseCallback) => void): this\n  override on(event: 'error', listener: (error: string, cb: ResponseCallback) => void): this\n  override on(event: string, listener: (...args: any[]) => void): this {\n    return super.on(event, listener)\n  }\n\n  constructor(config: SerialTransportConfig) {\n    super()\n    this.config = config\n  }\n\n  /**\n   * 启动串口传输层\n   */\n  start = async (): Promise<void> => {\n    logger.info('SerialTransport', `启动串口传输层: ${this.config.serialPath}`)\n    await this.connect()\n  }\n\n  /**\n   * 停止串口传输层\n   */\n  stop = async (): Promise<void> => {\n    logger.info('SerialTransport', '停止串口传输层')\n\n    // 清除重连定时器\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer)\n      this.reconnectTimer = null\n    }\n\n    await this.disconnect()\n  }\n\n  /**\n   * 发送数据到上位机\n   */\n  send = (data: string): void => {\n    if (!this.isConnected || !this.port) {\n      logger.warn('SerialTransport', '串口未连接，无法发送数据')\n      return\n    }\n\n    try {\n      // 添加换行符确保数据完整传输\n      const dataWithNewline = data.endsWith('\\r\\n') ? data : `${data}\\r\\n`\n      this.port.write(dataWithNewline, (err) => {\n        if (err) {\n          logger.error('SerialTransport', '发送数据失败:', err)\n          this.emit('error', `发送数据失败: ${err.message}`)\n        }\n        else {\n          logger.debug('SerialTransport', '发送数据:', data)\n        }\n      })\n    }\n    catch (error) {\n      logger.error('SerialTransport', '发送数据异常:', error)\n      this.emit('error', `发送数据异常: ${error instanceof Error ? error.message : String(error)}`)\n    }\n  }\n\n  /**\n   * 建立串口连接\n   */\n  private async connect(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        this.port = new SerialPort({\n          path: this.config.serialPath,\n          baudRate: this.config.baudRate || 115200,\n          dataBits: this.config.dataBits as 5 | 6 | 7 | 8,\n          stopBits: this.config.stopBits as 1 | 1.5 | 2,\n          parity: this.config.parity || 'none',\n          autoOpen: false,\n        })\n\n        // 创建数据解析器\n        this.parser = this.port.pipe(new ReadlineParser({ delimiter: '\\r\\n' }))\n\n        // 监听串口打开事件\n        this.port.on('open', () => {\n          this.isConnected = true\n          this.reconnectAttempts = 0\n          logger.info('SerialTransport', `串口连接成功: ${this.config.serialPath}`)\n          resolve()\n        })\n\n        // 监听串口错误事件\n        this.port.on('error', (err) => {\n          logger.error('SerialTransport', '串口错误:', err)\n          this.isConnected = false\n          this.emit('error', `串口错误: ${err.message}`)\n          reject(err)\n        })\n\n        // 监听串口关闭事件\n        this.port.on('close', () => {\n          logger.warn('SerialTransport', '串口连接关闭')\n          this.isConnected = false\n          this.scheduleReconnect()\n        })\n\n        // 监听数据接收事件\n        this.parser.on('data', (data: string) => {\n          logger.debug('SerialTransport', '接收解析分隔符后的数据:', data)\n          try {\n            this.handleReceivedData(data)\n          }\n          catch (error) {\n            logger.error('SerialTransport', '处理接收数据失败:', error)\n            this.emit('error', `处理接收数据失败: ${error instanceof Error ? error.message : String(error)}`)\n          }\n        })\n\n        // 打开串口\n        this.port.open()\n      }\n      catch (error) {\n        logger.error('SerialTransport', '创建串口连接失败:', error)\n        reject(error)\n      }\n    })\n  }\n\n  /**\n   * 断开串口连接\n   */\n  private async disconnect(): Promise<void> {\n    return new Promise<void>((resolve) => {\n      if (this.port && this.isConnected) {\n        this.port.close(() => {\n          this.isConnected = false\n          logger.info('SerialTransport', '串口连接已断开')\n          resolve()\n        })\n      }\n      else {\n        resolve()\n      }\n    })\n  }\n\n  /**\n   * 处理接收到的数据\n   */\n  private handleReceivedData(data: string): void {\n    // 创建响应回调函数\n    const responseCallback: ResponseCallback = (response: string) => {\n      this.send(response)\n    }\n\n    try {\n      const requestPayload = parseJSONMessage(data)\n\n      if (!requestPayload) {\n        logger.warn('SerialTransport', '接收到的数据格式不正确:', data)\n        this.emit('error', `接收到的数据格式不正确: ${data}`, responseCallback)\n        return\n      }\n\n      // 触发数据事件，传递给业务层处理\n      this.emit('data', requestPayload, responseCallback)\n    }\n    catch (error) {\n      logger.error('SerialTransport', '处理接收数据失败:', error)\n      this.emit('error', `处理接收数据失败: ${error instanceof Error ? error.message : String(error)}`, responseCallback)\n    }\n  }\n\n  /**\n   * 安排重连\n   */\n  private scheduleReconnect(): void {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      logger.error('SerialTransport', `重连失败，已达到最大重连次数: ${this.maxReconnectAttempts}`)\n      return\n    }\n\n    if (this.reconnectTimer) {\n      return // 已经在重连中\n    }\n\n    this.reconnectAttempts++\n    logger.info('SerialTransport', `${this.reconnectInterval / 1000}秒后尝试重连 (${this.reconnectAttempts}/${this.maxReconnectAttempts})`)\n\n    this.reconnectTimer = setTimeout(async () => {\n      this.reconnectTimer = null\n      try {\n        await this.connect()\n        logger.info('SerialTransport', '重连成功')\n      }\n      catch (error) {\n        logger.error('SerialTransport', '重连失败:', error)\n        this.scheduleReconnect()\n      }\n    }, this.reconnectInterval)\n  }\n\n  /**\n   * 获取连接状态\n   */\n  isConnectedStatus(): boolean {\n    return this.isConnected\n  }\n\n  /**\n   * 获取配置信息\n   */\n  getConfig(): SerialTransportConfig {\n    return { ...this.config }\n  }\n}\n"],"mappings":"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","names":["process","EventEmitter","path","EventEmitter","logger","logger","EventEmitter","z","logger","z","logger","logger","EventEmitter","ReadlineParser","SerialPort","logger","EventEmitter","SerialPort","ReadlineParser","logger","EventEmitter","configManager","logger","process"]}