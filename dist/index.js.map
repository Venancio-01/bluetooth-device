{"version":3,"sources":["../src/index.ts","../src/blue-device.ts","../src/protocol.ts","../src/utils.ts"],"sourcesContent":["import process from 'process'\nimport { BlueDevice } from './blue-device'\n\nlet blueDevice: BlueDevice | null = null\n\nasync function main() {\n  blueDevice = new BlueDevice()\n\n  try {\n    await blueDevice.connect()\n    console.log('蓝牙模块连接成功')\n  }\n  catch (error) {\n    console.error(error)\n  }\n\n  try {\n    await blueDevice.initialize()\n    console.log('蓝牙模块初始化完成')\n  }\n  catch (error) {\n    console.error(error)\n  }\n\n  try {\n    await blueDevice.scan()\n    console.log('启动扫描')\n  }\n  catch (error) {\n    console.error(error)\n  }\n}\n\nprocess.on('SIGINT', () => {\n  console.log('\\n检测到 SIGINT，正在关闭串口...')\n  blueDevice?.disconnect()\n  process.exit()\n})\n\nmain()\n\n// function parseData(data: string) {\n//   const demo = 'MAC:45:57:BC:FB:0F:09,RSSI:-87,ADV:02011A020A0C0AFF4C0010051A18A0D043'\n//   const adv = demo.split(',')[2].split(':')[1]\n\n//   const splitAdv = adv.substring(14, 16)\n\n//   if (splitAdv === 'FF') {\n//     const targetStr = adv.substring(18, 20) + adv.substring(16, 18)\n//     console.log(targetStr)\n//   }\n// }\n\n// parseData('02 01 1A 02 0A 0C 0A FF 4C0010051A18A0D043')\n","import { ReadlineParser } from '@serialport/parser-readline'\nimport { SerialPort } from 'serialport'\nimport { buildEnterCommandMode, buildObserverCommand, buildRestartCommand, buildRoleCommand } from './protocol'\nimport { sleep } from './utils'\n\n// 厂商字典\nconst MANUFACTURER_DICT = {\n  '0001': 'Nokia Mobile Phones',\n  // '0006': 'Microsoft',\n  '0008': 'Motorola',\n  '004C': 'Apple, Inc.',\n  '0056': 'Sony Ericsson Mobile Communications',\n  '0075': 'Samsung Electronics Co. Ltd.',\n  '00C4': 'LG Electronics',\n  '00EO': 'Google',\n} as const\n\nexport class BlueDevice {\n  private port: SerialPort | null = null\n  private isInitialized = false\n\n  constructor() {\n    this.port = null\n  }\n\n  async connect() {\n    return new Promise((resolve, reject) => {\n      this.port = new SerialPort({\n        path: '/dev/ttyUSB0',\n        baudRate: 115200,\n        dataBits: 8,\n        stopBits: 1,\n        parity: 'none',\n        autoOpen: false,\n      }, (err) => {\n        if (err) {\n          reject(err)\n        }\n      })\n\n      const parser = this.port.pipe(new ReadlineParser({ delimiter: '\\r\\n' }))\n\n      this.port.on('open', () => {\n        resolve(this.port)\n      })\n\n      this.port.on('error', (err) => {\n        reject(err)\n      })\n\n      this.port.on('close', () => {\n        reject(new Error('串口关闭'))\n      })\n\n      parser.on('data', (data) => {\n        console.log(data)\n      })\n\n      this.port.open()\n    })\n  }\n\n  async disconnect() {\n    this.port?.close()\n  }\n\n  async send(data: string) {\n    this.port?.write(data, (err) => {\n      if (err) {\n        console.error('发送数据时出错:', err.message)\n      }\n    })\n  }\n\n  async parseData(data: string) {\n    const advStr = data.split(',')?.[2]?.split(':')?.[1]\n\n    if (!advStr) {\n      return\n    }\n\n    const splitStr = advStr.substring(14, 16)\n\n    if (splitStr === 'FF') {\n      const targetStr = advStr.substring(18, 20) + advStr.substring(16, 18)\n      const manufacturer = MANUFACTURER_DICT[targetStr as keyof typeof MANUFACTURER_DICT]\n      console.log(manufacturer)\n    }\n  }\n\n  async sendAndSleep(data: string, sleepTime: number) {\n    await this.send(data)\n    await sleep(sleepTime)\n  }\n\n  async initialize() {\n    if (this.isInitialized) {\n      return\n    }\n\n    // 重启设备\n    await this.sendAndSleep(buildRestartCommand(), 1000)\n\n    // 进入AT命令模式\n    await this.sendAndSleep(buildEnterCommandMode(), 1000)\n\n    // 设置设备为从机模式\n    await this.sendAndSleep(buildRoleCommand(), 1000)\n\n    // 重启设备\n    await this.sendAndSleep(buildRestartCommand(), 3000)\n\n    // 进入AT命令模式\n    await this.sendAndSleep(buildEnterCommandMode(), 2000)\n\n    this.isInitialized = true\n  }\n\n  async scan() {\n    if (!this.isInitialized) {\n      await this.initialize()\n    }\n\n    // 设置设备为观察者模式\n    await this.sendAndSleep(buildObserverCommand(), 0)\n  }\n}\n","const AT_COMMAND_SUFFIX = '\\r\\n' // 所有 AT 命令都必须以回车换行符结尾\nconst AT_COMMAND_PREFIX = 'AT' // 所有 AT 命令都必须以 AT 开头\nconst AT_COMMAND_MODE = '+++' // 进入AT命令模式,无需回车换行符\n\nconst AT_RESTART = 'RESTART'\nconst AT_ROLE = 'ROLE=1'\nconst AT_OBSERVER = 'OBSERVER=1,4,,,'\n\n/**\n * 进入AT命令模式\n */\nexport function buildEnterCommandMode() {\n  return `${AT_COMMAND_MODE}`\n}\n\n/**\n * 重启设备\n */\nexport function buildRestartCommand() {\n  return `${AT_COMMAND_PREFIX}+${AT_RESTART}${AT_COMMAND_SUFFIX}`\n}\n\n/**\n * 设置设备为从机模式\n */\nexport function buildRoleCommand() {\n  return `${AT_COMMAND_PREFIX}+${AT_ROLE}${AT_COMMAND_SUFFIX}`\n}\n\n/**\n * 设置设备为观察者模式\n */\nexport function buildObserverCommand(rssi = 60) {\n  const defaultRssi = `-${rssi}`\n  return `${AT_COMMAND_PREFIX}+${AT_OBSERVER}${defaultRssi}${AT_COMMAND_SUFFIX}`\n}\n","export function sleep(ms: number) {\n  return new Promise(resolve => setTimeout(resolve, ms))\n}\n"],"mappings":"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","names":[]}